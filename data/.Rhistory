Condition == "drought stress condition")$`Sample name`
groups_osativa <<- studydesign_osativa_df$Condition
}
#' Import the kallisto "abundance.tsv" files.
#'
#' The "abundance.tsv" files must be in a subdirectory
#' <studydesign_df$`Run accession`> of the current working
#' directory.
#'
#' See https://bioconductor.org/packages/devel/bioc/vignettes/-
#' tximport/inst/doc/tximport.html
#'
#' Prerequisites:
#' - studydesign_onivara_df
#' - studydesign_osativa_df
import_kallisto_transcript_abundance_estimates <- function() {
# Function definitions
get_biomart <- function(dataset) {
biomaRt::useMart(
biomart = "plants_mart",
dataset = dataset,
host = "https://plants.ensembl.org")
}
get_tx2gene <- function(dataset) {
biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = get_biomart(dataset)) |>
tibble::as_tibble() |>
dplyr::rename(
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id") |>
dplyr::select("target_id", "gene_name")
}
get_abundance_filepaths <- function(studydsg) {
file.path(studydsg$`Run accession`, "abundance.tsv")
}
get_txigene <- function(dataset, studydsg) {
tximport::tximport(
get_abundance_filepaths(studydsg),
type = "kallisto",
tx2gene = get_tx2gene(dataset),
countsFromAbundance = "lengthScaledTPM")
}
# Create txi_gene_onivara and txi_gene_osativa
txi_gene_onivara <<- get_txigene(
dataset = "onivara_eg_gene",
studydsg = studydesign_onivara_df)
txi_gene_osativa <<- get_txigene(
dataset = "osativa_eg_gene",
studydsg = studydesign_osativa_df)
}
#' Plot some TPM statistics about the imported kallisto data for Oryza nivara.
plot_txi_gene_stats_onivara <- function() {
transform(
txi_gene_onivara$abundance,
SD = matrixStats::rowSds(txi_gene_onivara$abundance),
AVG = rowMeans(txi_gene_onivara$abundance),
MED = matrixStats::rowMedians(txi_gene_onivara$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = "Oryza nivara - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
#' Plot some TPM statistics about the imported kallisto data for Oryza sativa.
plot_txi_gene_stats_osativa <- function() {
transform(
txi_gene_osativa$abundance,
SD = matrixStats::rowSds(txi_gene_osativa$abundance),
AVG = rowMeans(txi_gene_osativa$abundance),
MED = matrixStats::rowMedians(txi_gene_osativa$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = "Oryza sativa - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
#' Create a CPM tibble
cpm_df <- function(data, samples) {
tibble::as_tibble(data, rownames = "geneID") |>
dplyr::rename_with(~ c("geneID", samples))
}
#' Create a log2 CPM tibble
cpm_log2_df <- function(data, samples) {
edgeR::cpm(data, log = TRUE) |> cpm_df(samples)
}
#' Pivot the (log2) CPM data frame.
pivot_cpm_df <- function(cpm_df, samples) {
tidyr::pivot_longer(
cpm_df,
cols = tidyselect::all_of(samples),
names_to = "sample",
values_to = "expression")
}
#' Create DGElist objects and compute counts per million (CPM) and their
#' respective log2 values.
#'
#' A DGEList object holds the dataset (read counts and associated information)
#' to be analyzed by edgeR and the subsequent calculations performed on the
#' dataset.
create_deglists_and_cpms <- function() {
# Oryza nivara
# Create a DGElist object
dgelist_onivara <<- edgeR::DGEList(txi_gene_onivara$counts)
# Compute counts per million (CPM) and their respective log2 values
cpm_onivara <<- edgeR::cpm(dgelist_onivara)
cpm_log2_onivara_df <<- cpm_log2_df(cpm_onivara, samples_onivara)
cpm_log2_onivara_piv <<- pivot_cpm_df(cpm_log2_onivara_df, samples_onivara)
# Oryza sativa
# Create a DGElist object
dgelist_osativa <<- edgeR::DGEList(txi_gene_osativa$counts)
# Compute counts per million (CPM) and their respective log2 values
cpm_osativa <<- edgeR::cpm(dgelist_osativa)
cpm_log2_osativa_df <<- cpm_log2_df(cpm_osativa, samples_osativa)
cpm_log2_osativa_piv <<- pivot_cpm_df(cpm_log2_osativa_df, samples_osativa)
}
#' Create a plot of the CPM data.
plot_cpm <- function(cpm_piv, organism, log2, filtered, normalized) {
ggplot2::ggplot(cpm_piv) +
ggplot2::aes(x = sample, y = expression, fill = sample) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
x = "sample",
y = paste0(if (log2) "log2 " else "", "expression"),
title = paste0(
organism, " - ",
if (log2) "Log2 " else "",
"Counts per Million (CPM)"),
subtitle = paste0(
if (filtered) "filtered" else "unfiltered", ", ",
if (normalized) "normalized" else "non-normalized",
" data")) +
ggplot2::theme_bw()
}
#' Create filtered DGElist objects and compute log2 CPM of the filtered data.
#'
#' Low reads (less than <cpm_thr> CPM in at least <sample_perc> of the samples)
#' are filtered out.
filter_low_cpm <- function(cpm_thr, sample_perc) {
# Oryza nivara
# Create a DGElist object
dgelist_fltr_onivara <<- dgelist_onivara[
rowSums(cpm_onivara >= cpm_thr) >= length(samples_onivara) * sample_perc, ]
# Compute counts per million (CPM) and their respective log2 values
cpm_fltr_log2_onivara_df <<- cpm_log2_df(
dgelist_fltr_onivara,
samples_onivara)
cpm_fltr_log2_onivara_piv <<- pivot_cpm_df(
cpm_fltr_log2_onivara_df,
samples_onivara)
# Oryza sativa
# Create a DGElist object
dgelist_fltr_osativa <<- dgelist_osativa[
rowSums(cpm_osativa >= cpm_thr) >= length(samples_osativa) * sample_perc, ]
# Compute counts per million (CPM) and their respective log2 values
cpm_fltr_log2_osativa_df <<- cpm_log2_df(
dgelist_fltr_osativa,
samples_osativa)
cpm_fltr_log2_osativa_piv <<- pivot_cpm_df(
cpm_fltr_log2_osativa_df,
samples_osativa)
}
#' Normalize the filtered data.
normalize_data <- function() {
# Oryza nivara
# Compute scaling factors to convert observed library sizes into
# effective library sizes
dgelist_fltr_norm_onivara <<- edgeR::calcNormFactors(
dgelist_fltr_onivara,
method = "TMM")
# Compute counts per million (CPM) and their respective log2 values
cpm_fltr_norm_log2_onivara <<- edgeR::cpm(
dgelist_fltr_norm_onivara,
log = TRUE)
cpm_fltr_norm_log2_onivara_df <<- cpm_df(
cpm_fltr_norm_log2_onivara,
samples_onivara)
cpm_fltr_norm_log2_onivara_piv <<- pivot_cpm_df(
cpm_fltr_norm_log2_onivara_df,
samples_onivara)
# Oryza sativa
# Compute scaling factors to convert observed library sizes into
# effective library sizes
dgelist_fltr_norm_osativa <<- edgeR::calcNormFactors(
dgelist_fltr_osativa,
method = "TMM")
# Compute counts per million (CPM) and their respective log2 values
cpm_fltr_norm_log2_osativa <<- edgeR::cpm(
dgelist_fltr_norm_osativa,
log = TRUE)
cpm_fltr_norm_log2_osativa_df <<- cpm_df(
cpm_fltr_norm_log2_osativa,
samples_osativa)
cpm_fltr_norm_log2_osativa_piv <<- pivot_cpm_df(
cpm_fltr_norm_log2_osativa_df,
samples_osativa)
}
#' Plot a cluster dendrogram of the samples.
plot_hclust <- function(cpm, samples, organism, filtered, normalized) {
plot(
hclust(
cpm |> t() |> dist(method = "euclidean"),
method = "complete"),
labels = samples,
main = paste(organism, "- Cluster Dendogram"),
xlab = "euclidean distance",
sub = paste0(
if (filtered) "filtered" else "unfiltered", ", ",
if (normalized) "normalized" else "non-normalized",
" data"))
}
#' Do a principal component analysis (PCA).
do_pca <- function() {
# Function definitions
compute_pca_res <- function(cpm) {
t(cpm)|> prcomp(scale = FALSE, retx = TRUE)
}
# Oryza nivara
pca_res_onivara <<- compute_pca_res(cpm_fltr_norm_log2_onivara)
# Oryza sativa
pca_res_osativa <<- compute_pca_res(cpm_fltr_norm_log2_osativa)
}
#' Plot the samples and their contributioh percentage to the first two PCs.
plot_pc1_pc2 <- function(pca_res, samples, groups, organism) {
# Percentage variance explained by each PC
pca_pct <- round(pca_res$sdev^2 * 100 / sum(pca_res$sdev^2), 1)
# Create the plot
ggplot2::ggplot(tibble::as_tibble(pca_res$x)) +
ggplot2::aes(x = PC1, y = PC2, label = samples, color = groups) +
ggplot2::geom_point(size = 4) +
ggrepel::geom_text_repel(nudge_x = 10, nudge_y = 5) +
ggplot2::stat_ellipse() +
ggplot2::xlab(paste0("PC1 (", pca_pct[1], "%", ")")) +
ggplot2::ylab(paste0("PC2 (", pca_pct[2], "%", ")")) +
ggplot2::labs(colour = "group") +
ggplot2::ggtitle(paste0(organism, " - PCA plot")) +
ggplot2::theme_bw()
}
#' Make an interactive table which compares for each gene the medium filtered
#' and normalized log CPM values of the "normal condition" samples with the
#' corresponding values of the "drought stress condition" samples.
make_cpm_comparison_table_normal_vs_stress_onivara <- function() {
cpm_fltr_norm_log2_onivara_df |>
rowwise() |>
summarize(
geneID,
normal.AVG = (BJ278C1 + BJ278C2 + BJ278C3 + BJ89C1 + BJ89C2 + BJ89C3) / 6,
stress.AVG = (BJ278P1 + BJ278P2 + BJ278P3 + BJ89P1 + BJ89P2 + BJ89P3) / 6,
LogFC = stress.AVG - normal.AVG) |>
dplyr::arrange(dplyr::desc(LogFC)) |>
DT::datatable(
caption = "Oryza nivara - CPM comparison normal vs draught stress",
extensions = c("KeyTable", "FixedHeader"),
filter = "top",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(2:4)
}
#' Make an interactive table which compares for each gene the medium filtered
#' and normalized log CPM values of the "normal condition" samples with the
#' corresponding values of the "drought stress condition" samples.
make_cpm_comparison_table_normal_vs_stress_osativa <- function() {
cpm_fltr_norm_log2_osativa_df |>
rowwise() |>
summarize(
geneID,
normal.AVG = (NC1 + NC2 + NC1) / 3,
stress.AVG = (NP1 + NP2 + NP3) / 3,
LogFC = stress.AVG - normal.AVG) |>
dplyr::arrange(dplyr::desc(LogFC)) |>
DT::datatable(
caption = "Oryza sativa - CPM comparison normal vs draught stress",
extensions = c("KeyTable", "FixedHeader"),
filter = "top",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(2:4)
}
#' Create the design and contrast matrices.
create_design_and_contrast_mtx <- function() {
# Oryza nivara
model_mtx_onivara <<- model.matrix(~0 + groups_onivara)
colnames(model_mtx_onivara) <<- make.names(levels(groups_onivara))
contrast_mtx_onivara <<- limma::makeContrasts(
stress = drought.stress.condition - normal.condition,
levels = model_mtx_onivara)
# Oryza sativa
model_mtx_osativa <<- model.matrix(~0 + groups_osativa)
colnames(model_mtx_osativa) <<- make.names(levels(groups_osativa))
contrast_mtx_osativa <<- limma::makeContrasts(
stress = drought.stress.condition - normal.condition,
levels = model_mtx_osativa)
}
#' Model mean-variance trend and fit a linear model to the data.
model_mean_var_trend_and_fitlm <- function() {
# Oryza nivara
voom_onivara <<- limma::voom(
dgelist_fltr_norm_onivara,
design = model_mtx_onivara,
plot = TRUE)
dgelist_fltr_norm_lmfit_onivara <<- limma::lmFit(
voom_onivara,
design = model_mtx_onivara)
# Oryza sativa
voom_osativa <<- limma::voom(
dgelist_fltr_norm_osativa,
design = model_mtx_osativa,
plot = TRUE)
dgelist_fltr_norm_lmfit_osativa <<- limma::lmFit(
voom_osativa,
design = model_mtx_osativa)
}
#' Compute empirical Bayes stats for the contrasts from the linear model fits.
#'
#' Computed statistics:
#' - log FC      : log2-fold-change corresponding to the contrast
#' - AveExpr     : average log2-expression
#' - t           : moderated t-statistic: ratio of the logFC to the standard
#'                 error (where the error has been moderated across all genes
#'                 because of Bayesian approach)
#' - P.Value     : raw p-value
#' - adj.P.Value : adjusted p-value (by BH)
#' - B           : log-odds that the gene is differentially expressed
compute_ebayes_stats <- function() {
# Oryza nivara
ebayes_onivara <<-
dgelist_fltr_norm_lmfit_onivara |>
limma::contrasts.fit(contrasts = contrast_mtx_onivara) |>
limma::eBayes()
# Oryza sativa
ebayes_osativa <<-
dgelist_fltr_norm_lmfit_osativa |>
limma::contrasts.fit(contrasts = contrast_mtx_osativa) |>
limma::eBayes()
}
#' Extract tables of the top-ranked genes from the linear model fits.
extract_top_genes_from_lmfit <- function() {
# Function definitions
top_genes <- function(ebayes) {
limma::topTable(
ebayes,
adjust.method = "BH",
coef = 1,
number = 100000,
sort.by = "logFC") |>
tibble::as_tibble(rownames = "geneID")
}
# Oryza nivara
top_genes_onivara_df <<- top_genes(ebayes_onivara)
# Oryza sativa
top_genes_osativa_df <<- top_genes(ebayes_osativa)
}
#' Create an interactive volcano plot of the differentially expressed genes.
plot_volcano_top_genes <- function(top_genes_df, organism) {
(top_genes_df |>
ggplot2::ggplot() +
ggplot2::aes(x = logFC, y = -log10(adj.P.Val), text = geneID) +
ggplot2::geom_point(size = 0.2) +
ggplot2::geom_hline(
yintercept = -log10(0.01),
linetype = "longdash",
colour= "grey",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = 1,
linetype ="longdash",
colour = "coral",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = -1,
linetype = "longdash",
colour = "cadetblue",
linewidth = 1) +
ggplot2::annotate(
"rect",
xmin = 1,
xmax = 12,
ymin = -log10(0.01),
ymax = 7.5,
alpha = .2,
fill = "coral") +
ggplot2::annotate(
"rect",
xmin = -1,
xmax = -12,
ymin = -log10(0.01),
ymax = 7.5,
alpha=.2,
fill = "cadetblue") +
ggplot2::ggtitle(paste0(organism, " - volcano plot")) +
ggplot2::theme_bw()) |>
plotly::ggplotly()
}
#' Perform limma test for the empirical Bayes stats.
do_limma_test <- function(ebayes) {
limma::decideTests(
ebayes,
method = "global",
adjust.method = "BH",
p.value = 0.01,
lfc = 7)
}
#' Create an interactive table of the DEGs.
create_deg_table <- function(deg_df, organism) {
DT::datatable(
deg_df,
extensions = c("KeyTable", "FixedHeader"),
caption = paste("DEGs in", organism),
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns = c(2:ncol(deg_df)), digits = 2)
}
#' Create a heatmap of the DEGs.
create_deg_heatmap <- function(deg_df, samples, organism) {
dplyr::select(deg_df, !1) |>
heatmaply::heatmaply(
xlab = "Samples",
ylab = "DEGs",
main = paste("DEGs in", organism),
scale = "column",
margins = c(60, 100, 40, 20),
grid_color = "white",
grid_width = 0.0000001,
titleX = TRUE,
titleY = TRUE,
hide_colorbar = TRUE,
branches_lwd = 0.1,
label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = samples,
labRow = deg_df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
}
# ------------------------------------------------------------------------------
# Step 0: Generate BibTeX bibliography entries for the used packages
# ------------------------------------------------------------------------------
knitr::write_bib()
# ------------------------------------------------------------------------------
# Step 1: Import and annotate the Kallisto abundance files
# ------------------------------------------------------------------------------
# Set the project's data subdirectory as the current working directory
setwd(paste0(this.path::here(), "/../data"))
# Set the project's data subdirectory as the current working directory
setwd(paste0(this.path::here(), "/../data"))
# Read in the studydesign file
create_studydesign_data()
View(import_kallisto_transcript_abundance_estimates)
# Import the kallisto "abundance.tsv" files
import_kallisto_transcript_abundance_estimates()
View(txi_gene_onivara)
txi_gene_onivara$abundance
txi_gene_onivara$counts
biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = get_biomart(dataset)) |>
tibble::as_tibble() |>
dplyr::rename(
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id") |>
dplyr::select("target_id", "gene_name")
mart <- biomaRt::useMart(
biomart = "plants_mart",
dataset = dataset,
host = "https://plants.ensembl.org")
mart <- biomaRt::useMart(
biomart = "plants_mart",
dataset = "onivara_eg_gene",
host = "https://plants.ensembl.org")
biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = mart) |>
tibble::as_tibble() |>
dplyr::rename(
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id") |>
dplyr::select("target_id", "gene_name")
View(plot_txi_gene_stats_onivara)
View(create_deglists_and_cpms)
View(cpm_log2_df)
