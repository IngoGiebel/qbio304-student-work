fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza sativa - Log2 Counts per Million (CPM)",
subtitle = "filtered, non-normalized") +
ggplot2::theme_bw()
plot_osativa_2
dgelist_filtered_norm_onivara <- edgeR::calcNormFactors(
dgelist_filtered_onivara,
method = "TMM")
# Get log2 'counts per million'
dge_cpm_filtered_norm_log2_onivara <-
edgeR::cpm(dgelist_filtered_norm_onivara, log = TRUE)
dge_cpm_filtered_norm_log2_onivara_df <-
dge_cpm_filtered_norm_log2_onivara |>
tibble::as_tibble(rownames = "geneID") |>
dplyr::rename_with(~ c("geneID", samples_onivara))
# Pivot the dataframe
dge_cpm_filtered_norm_log2_onivara_df_pivot <-
dge_cpm_filtered_norm_log2_onivara_df |>
tidyr::pivot_longer(
cols = samples_onivara,
names_to = "sample",
values_to = "expression")
View(dge_cpm_filtered_norm_log2_onivara_df_pivot)
# Pivot the dataframe
dge_cpm_filtered_norm_log2_onivara_df_pivot <-
dge_cpm_filtered_norm_log2_onivara_df |>
tidyr::pivot_longer(
cols = tidyselect::all_of(samples_onivara),
names_to = "sample",
values_to = "expression")
# Plot this pivoted data
plot_onivara_3 <-
ggplot2::ggplot(dge_cpm_filtered_norm_log2_onivara_df_pivot) +
ggplot2::aes(x = sample, y = expression, fill = sample) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza nivara - Log2 Counts per Million (CPM)",
subtitle = "filtered, TMM normalized") +
ggplot2::theme_bw()
plot_onivara_3
dgelist_filtered_norm_osativa <- edgeR::calcNormFactors(
dgelist_filtered_osativa,
method = "TMM")
# Get log2 'counts per million'
dge_cpm_filtered_norm_log2_osativa <-
edgeR::cpm(dgelist_filtered_norm_osativa, log = TRUE)
dge_cpm_filtered_norm_log2_osativa_df <-
dge_cpm_filtered_norm_log2_osativa |>
tibble::as_tibble(rownames = "geneID") |>
dplyr::rename_with(~ c("geneID", samples_osativa))
# Pivot the dataframe
dge_cpm_filtered_norm_log2_osativa_df_pivot <-
dge_cpm_filtered_norm_log2_osativa_df |>
tidyr::pivot_longer(
cols = samples_osativa,
names_to = "sample",
values_to = "expression")
# Pivot the dataframe
dge_cpm_filtered_norm_log2_osativa_df_pivot <-
dge_cpm_filtered_norm_log2_osativa_df |>
tidyr::pivot_longer(
cols = tidyselect::all_of(samples_osativa),
names_to = "sample",
values_to = "expression")
# Plot this pivoted data
plot_osativa_3 <-
ggplot2::ggplot(dge_cpm_filtered_norm_log2_osativa_df_pivot) +
ggplot2::aes(x = sample, y = expression, fill = sample) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza sativa - Log2 Counts per Million (CPM)",
subtitle = "filtered, TMM normalized") +
ggplot2::theme_bw()
plot_osativa_3
# Combine all six violin plots in one overview plot
cowplot::plot_grid(
plot_onivara_1 + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_osativa_1 + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
plot_onivara_2 + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_osativa_2 + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
plot_onivara_3 + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_osativa_3 + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
ncol = 2,
rel_widths = c(2, 1),
labels = c("A", "B", "C", "D", "E", "F"),
label_size = 8)
# Plot this pivoted data
plot_onivara_2 <-
ggplot2::ggplot(dge_cpm_filtered_log2_onivara_df_pivot) +
ggplot2::aes(x = sample, y = expression, fill = sample) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza nivara - Log2 Counts per Million (CPM)",
subtitle = "filtered, non-normalized") +
ggplot2::theme_bw()
# Combine all six violin plots in one overview plot
cowplot::plot_grid(
plot_onivara_1 + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_osativa_1 + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
plot_onivara_2 + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_osativa_2 + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
plot_onivara_3 + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_osativa_3 + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
ncol = 2,
rel_widths = c(2, 1),
labels = c("A", "B", "C", "D", "E", "F"),
label_size = 8)
groups_onivara <- studydesign_onivara_df$Condition
pca_res_onivara <-
dge_cpm_filtered_norm_log2_onivara |>
t() |>
prcomp(scale = FALSE, retx = TRUE)
# Eigenvalues from the PCA result
pca_var_onivara <- pca_res_onivara$sdev^2
# Percentage variance explained by each PC
pca_per_onivara <- round(pca_var_onivara * 100 / sum(pca_var_onivara), 1)
# Plot PC1 and PC2 against each other
pca_res_onivara_df <- tibble::as_tibble(pca_res_onivara$x)
pca_plot_onivara <-
ggplot2::ggplot(pca_res_onivara_df) +
ggplot2::aes(
x = PC1,
y = PC2,
label = samples_onivara,
color = groups_onivara) +
ggplot2::geom_point(size = 4) +
ggplot2::stat_ellipse() +
ggplot2::xlab(paste0("PC1 (", pca_per_onivara[1], "%", ")")) +
ggplot2::ylab(paste0("PC2 (", pca_per_onivara[2], "%", ")")) +
ggplot2::labs(colour = "group") +
ggplot2::ggtitle("Oryza nivara - PCA plot") +
ggplot2::theme_bw()
plotly::ggplotly(pca_plot_onivara)
# Make an interactive table
dge_cpm_filtered_log2_onivara_df |>
dplyr::mutate(
normal.AVG = (BJ278C1 + BJ278C2 + BJ278C3 + BJ89C1 + BJ89C2 + BJ89C3) / 6,
stress.AVG = (BJ278P1 + BJ278P2 + BJ278P3 + BJ89P1 + BJ89P2 + BJ89P3) / 6,
LogFC = (stress.AVG - normal.AVG)) |>
dplyr::select(geneID, normal.AVG, stress.AVG, LogFC) |>
dplyr::mutate(
normal.AVG = round(normal.AVG, 2),
stress.AVG = round(stress.AVG, 2),
LogFC = round(LogFC, 2)) |>
dplyr::arrange(dplyr::desc(LogFC)) |>
DT::datatable(
extensions = c("KeyTable", "FixedHeader"),
filter = "top",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100")))
groups_osativa <- studydesign_osativa_df$Condition
pca_res_osativa <-
dge_cpm_filtered_norm_log2_osativa |>
t() |>
prcomp(scale = FALSE, retx = TRUE)
# Eigenvalues from the PCA result
pca_var_osativa <- pca_res_osativa$sdev^2
# Percentage variance explained by each PC
pca_per_osativa <- round(pca_var_osativa * 100 / sum(pca_var_osativa), 1)
# Plot PC1 and PC2 against each other
pca_res_osativa_df <- tibble::as_tibble(pca_res_osativa$x)
pca_plot_osativa <-
ggplot2::ggplot(pca_res_osativa_df) +
ggplot2::aes(
x = PC1,
y = PC2,
label = samples_osativa,
color = groups_osativa) +
ggplot2::geom_point(size = 4) +
ggplot2::stat_ellipse() +
ggplot2::xlab(paste0("PC1 (", pca_per_osativa[1], "%", ")")) +
ggplot2::ylab(paste0("PC2 (", pca_per_osativa[2], "%", ")")) +
ggplot2::labs(colour = "group") +
ggplot2::ggtitle("Oryza sativa - PCA plot") +
ggplot2::theme_bw()
plotly::ggplotly(pca_plot_osativa)
# Make an interactive table
dge_cpm_filtered_log2_osativa_df |>
dplyr::mutate(
normal.AVG = (NC1 + NC2 + NC1) / 3,
stress.AVG = (NP1 + NP2 + NP3) / 3,
LogFC = (stress.AVG - normal.AVG)) |>
dplyr::select(geneID, normal.AVG, stress.AVG, LogFC) |>
dplyr::mutate(
normal.AVG = round(normal.AVG, 2),
stress.AVG = round(stress.AVG, 2),
LogFC = round(LogFC, 2)) |>
dplyr::arrange(dplyr::desc(LogFC)) |>
DT::datatable(
extensions = c("KeyTable", "FixedHeader"),
filter = "top",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100")))
# Set up the design and contrast matrices
model_matrix_onivara <- model.matrix(~0 + groups_onivara)
colnames(model_matrix_onivara) <- make.names(levels(groups_onivara))
contrast_matrix_onivara <- limma::makeContrasts(
stress = drought.stress.condition - normal.condition,
levels = model_matrix_onivara)
model_matrix_osativa <- model.matrix(~0 + groups_osativa)
colnames(model_matrix_osativa) <- make.names(levels(groups_osativa))
contrast_matrix_osativa <- limma::makeContrasts(
stress = drought.stress.condition - normal.condition,
levels = model_matrix_osativa)
# Model mean-variance trend and fit a linear model to the data
dgelist_filtered_norm_voom_onivara <- limma::voom(
dgelist_filtered_norm_onivara,
design = model_matrix_onivara,
plot = TRUE)
dgelist_filtered_norm_lmfit_onivara <- limma::lmFit(
dgelist_filtered_norm_voom_onivara,
design = model_matrix_onivara)
dgelist_filtered_norm_voom_osativa <- limma::voom(
dgelist_filtered_norm_osativa,
design = model_matrix_osativa,
plot = TRUE)
dgelist_filtered_norm_lmfit_osativa <- limma::lmFit(
dgelist_filtered_norm_voom_osativa,
design = model_matrix_osativa)
# Get Bayesian stats for the contrasts from the linear model fits
ebayes_onivara <-
dgelist_filtered_norm_lmfit_onivara |>
limma::contrasts.fit(contrasts = contrast_matrix_onivara) |>
limma::eBayes()
ebayes_osativa <-
dgelist_filtered_norm_lmfit_osativa |>
limma::contrasts.fit(contrasts = contrast_matrix_osativa) |>
limma::eBayes()
# Determine the top-ranked genes
top_ranked_genes_onivara_df <-
limma::topTable(
ebayes_onivara,
adjust.method = "BH",
coef = 1,
number = 100000,
sort.by = "logFC") |>
tibble::as_tibble(rownames = "geneID")
# Create an interactive vulcano plot
(top_ranked_genes_onivara_df |>
ggplot2::ggplot() +
ggplot2::aes(x = logFC, y = -log10(adj.P.Val), text = geneID) +
ggplot2::geom_point(size = 0.2) +
ggplot2::geom_hline(
yintercept = -log10(0.01),
linetype = "longdash",
colour= "grey",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = 1,
linetype ="longdash",
colour = "coral",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = -1,
linetype = "longdash",
colour = "cadetblue",
linewidth = 1) +
ggplot2::annotate(
"rect",
xmin = 1,
xmax = 12,
ymin = -log10(0.01),
ymax = 7.5,
alpha = .2,
fill = "coral") +
ggplot2::annotate(
"rect",
xmin = -1,
xmax = -12,
ymin = -log10(0.01),
ymax = 7.5,
alpha=.2,
fill = "cadetblue") +
ggplot2::ggtitle("Oryza nivara - volcano plot") +
ggplot2::theme_bw()) |>
plotly::ggplotly()
# Determine the top-ranked genes
top_ranked_genes_osativa_df <-
limma::topTable(
ebayes_osativa,
adjust.method = "BH",
coef = 1,
number = 100000,
sort.by = "logFC") |>
tibble::as_tibble(rownames = "geneID")
# Create an interactive vulcano plot
(top_ranked_genes_osativa_df |>
ggplot2::ggplot() +
ggplot2::aes(x = logFC, y = -log10(adj.P.Val), text = geneID) +
ggplot2::geom_point(size = 0.2) +
ggplot2::geom_hline(
yintercept = -log10(0.01),
linetype = "longdash",
colour= "grey",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = 1,
linetype ="longdash",
colour = "coral",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = -1,
linetype = "longdash",
colour = "cadetblue",
linewidth = 1) +
ggplot2::annotate(
"rect",
xmin = 1,
xmax = 12,
ymin = -log10(0.01),
ymax = 7.5,
alpha = .2,
fill = "coral") +
ggplot2::annotate(
"rect",
xmin = -1,
xmax = -12,
ymin = -log10(0.01),
ymax = 7.5,
alpha=.2,
fill = "cadetblue") +
ggplot2::ggtitle("Oryza sativa - volcano plot") +
ggplot2::theme_bw()) |>
plotly::ggplotly()
# Oryza nivara
test_results_oryza_nivara <- limma::decideTests(
ebayes_onivara,
method = "global",
adjust.method = "BH",
p.value = 0.01,
lfc = 7)
head(test_results_oryza_nivara)
summary(test_results_oryza_nivara)
limma::vennDiagram(test_results_oryza_nivara, include = "both")
# Oryza sativa
test_results_oryza_sativa <- limma::decideTests(
ebayes_osativa,
method = "global",
adjust.method = "BH",
p.value = 0.01,
lfc = 7)
head(test_results_oryza_sativa)
summary(test_results_oryza_sativa)
limma::vennDiagram(test_results_oryza_sativa, include = "both")
# Extract the expression data of the DEGs
colnames(dgelist_filtered_norm_voom_onivara$E) <- samples_onivara
deg_oryza_nivara_df <-
dgelist_filtered_norm_voom_onivara$E[
test_results_oryza_nivara[, 1] != 0, ] |>
as_tibble(rownames = "geneID")
# Write the DEGs to the file DEGs_Oryza_nivara.txt
readr::write_tsv(deg_oryza_nivara_df, "DEGs_Oryza_nivara.txt")
# Create an interactive table
deg_oryza_nivara_df |>
DT::datatable(
extensions = c("KeyTable", "FixedHeader"),
caption = "DEGs in Oryza nivara",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns = c(2:13), digits = 2)
# Create a heatmap
deg_oryza_nivara_df |>
dplyr::select(!1) |>
heatmaply::heatmaply(
xlab = "Samples",
ylab = "DEGs",
main = "DEGs in Oryza nivara",
scale = "column",
margins = c(60, 100, 40, 20),
grid_color = "white",
grid_width = 0.0000001,
titleX = TRUE,
titleY = TRUE,
hide_colorbar = TRUE,
branches_lwd = 0.1,
label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = samples_onivara,
labRow = deg_oryza_nivara_df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
# Extract the expression data of the DEGs
colnames(dgelist_filtered_norm_voom_osativa$E) <- samples_osativa
deg_osativa_df <-
dgelist_filtered_norm_voom_osativa$E[
test_results_oryza_sativa[, 1] != 0, ] |>
as_tibble(rownames = "geneID")
# Write the DEGs to the file DEGs_Oryza_sativa.txt
readr::write_tsv(deg_osativa_df, "DEGs_Oryza_sativa.txt")
# Create an interactive table
deg_osativa_df |>
DT::datatable(
extensions = c("KeyTable", "FixedHeader"),
caption = "DEGs in Oryza sativa",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns = c(2:7), digits = 2)
# Create a heatmap
deg_osativa_df |>
dplyr::select(!1) |>
heatmaply::heatmaply(
xlab = "Samples",
ylab = "DEGs",
main = "DEGs in Oryza sativa",
scale = "column",
margins = c(60, 100, 40, 20),
grid_color = "white",
grid_width = 0.0000001,
titleX = TRUE,
titleY = TRUE,
hide_colorbar = TRUE,
branches_lwd = 0.1,
label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = samples_osativa,
labRow = deg_osativa_df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
# Functional enrichment analysis of the 100 top-ranked genes
top_ranked_genes_gostres_onivara <- gprofiler2::gost(
top_ranked_genes_onivara_df$geneID[1:100],
organism = "onivara",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_ranked_genes_gostres_onivara,
interactive = TRUE,
capped = FALSE)
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_gostres_onivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_gostres_onivara$result$term_id[1:10])
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_ranked_genes_gostres_onivara,
highlight_terms = top_ranked_genes_gostres_onivara$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
# Functional enrichment analysis of the 100 top-ranked genes
top_ranked_genes_gostres_osativa <- gprofiler2::gost(
top_ranked_genes_osativa_df$geneID[1:100],
organism = "osativa",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_ranked_genes_gostres_osativa,
interactive = TRUE,
capped = FALSE)
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_gostres_osativa,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_gostres_osativa$result$term_id[1:10])
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_ranked_genes_gostres_osativa,
highlight_terms = top_ranked_genes_gostres_osativa$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
source("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/scripts/dge-analysis-PRJCA004229.R", echo=TRUE)
