#'
#' Read in the studydesign tsv-file "studydesign-PRJCA004229.tsv" and
#' create a tibble for the overall studydesign and one tibble for each
#' of the  studydesigns restricted to Oryzy nivara and Oryza sativa.
create_studydesign_data <- function() {
studydesign_df <<- readr::read_tsv(
"studydesign-PRJCA004229.tsv",
col_types = "icccccfffcficfc")
studydesign_onivara_df <<- dplyr::filter(
studydesign_df,
Organism == "Oryza nivara")
studydesign_osativa_df <<- dplyr::filter(
studydesign_df,
Organism == "Oryza sativa")
}
#' The "abundance.tsv" files must be in a subdirectory
#' <studydesign_df$`Run accession`> of the current working
#' directory.
#'
#' See https://bioconductor.org/packages/devel/bioc/vignettes/-
#' tximport/inst/doc/tximport.html
#'
#' Prerequisites:
#' - studydesign_onivara_df
#' - studydesign_osativa_df
import_kallisto_transcript_abundance_estimates <- function() {
get_biomart <- function(dataset) {
biomaRt::useMart(
biomart = "plants_mart",
dataset = dataset,
host = "https://plants.ensembl.org")
}
get_tx2gene <- function(dataset) {
biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = get_biomart(dataset)) |>
tibble::as_tibble() |>
dplyr::rename(
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id") |>
dplyr::select("target_id", "gene_name")
}
get_abundance_filepaths <- function(studydsg) {
file.path(studydsg$`Run accession`, "abundance.tsv")
}
get_txigene <- function(dataset, studydsg) {
tximport::tximport(
get_abundance_filepaths(studydsg),
type = "kallisto",
tx2gene = get_tx2gene(dataset),
countsFromAbundance = "lengthScaledTPM")
}
txi_gene_onivara <<- get_txigene(
dataset = "onivara_eg_gene",
studydsg = studydesign_onivara_df)
txi_gene_osativa <<- get_txigene(
dataset = "osativa_eg_gene",
studydsg = studydesign_osativa_df)
}
#' Plot some TPM statistics about the imported kallisto data.
plot_txi_gene_stats <- function(txi_gene, organism) {
transform(
txi_gene$abundance,
SD = matrixStats::rowSds(txi_gene$abundance),
AVG = rowMeans(txi_gene$abundance),
MED = matrixStats::rowMedians(txi_gene$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = paste(organism, "- Transcripts per million (TPM)"),
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
plot_test <- function(txi_gene) {
txi_gene_abundance <- txi_gene$abundance
transform(
txi_gene_abundance,
SD = matrixStats::rowSds(txi_gene_abundance),
AVG = rowMeans(txi_gene_abundance),
MED = matrixStats::rowMedians(txi_gene_abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = paste(organism, "- Transcripts per million (TPM)"),
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
# Set the project's data subdirectory as the current working directory
setwd(paste0(this.path::here(), "/../data"))
# Read in the studydesign file
create_studydesign_data()
# Import the kallisto "abundance.tsv" files
import_kallisto_transcript_abundance_estimates()
# Plot some TPM statistics about the imported kallisto data
plot_test(txi_gene_onivara)
plot_test <- function(txi_gene) {
txi_gene_abundance <- txi_gene$abundance
transform(
txi_gene_abundance,
SD = matrixStats::rowSds(txi_gene_abundance),
AVG = rowMeans(txi_gene_abundance),
MED = matrixStats::rowMedians(txi_gene_abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = paste(organism, "- Transcripts per million (TPM)"),
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
# Plot some TPM statistics about the imported kallisto data
plot_test(txi_gene_onivara)
# Provides static code analysis for R. It checks for adherence to a given style,
# identifying syntax errors and possible semantic issues
library(lintr)
# For setting the current working directory relative to the filepath
# of this script
library(this.path)
# Tools for Data Copy-Pasta. RStudio addins and R functions that make
# copy-pasting vectors and tables to text painless.
library(datapasta)
# Hadley Wickham's collection of R packages for data science
library(tidyverse)
# To combine multiple plots in one figure
library(cowplot)
# For making interactive plots
library(plotly)
# For making interactive tables
library(DT)
# For annotating the abundance data
library(biomaRt)
# For getting Kallisto results into R
library(tximport)
# For differential expression analysis. Here used for creating DGEList objects
# and for data normalization.
library(edgeR)
# R interface to the g:Profiler tools
library(gprofiler2)
#' Read in the studydesign tsv-file "studydesign-PRJCA004229.tsv".
#'
#' Read in the studydesign tsv-file "studydesign-PRJCA004229.tsv" and
#' create a tibble for the overall studydesign and one tibble for each
#' of the  studydesigns restricted to Oryzy nivara and Oryza sativa.
create_studydesign_data <- function() {
studydesign_df <<- readr::read_tsv(
"studydesign-PRJCA004229.tsv",
col_types = "icccccfffcficfc")
studydesign_onivara_df <<- dplyr::filter(
studydesign_df,
Organism == "Oryza nivara")
studydesign_osativa_df <<- dplyr::filter(
studydesign_df,
Organism == "Oryza sativa")
}
#' The "abundance.tsv" files must be in a subdirectory
#' <studydesign_df$`Run accession`> of the current working
#' directory.
#'
#' See https://bioconductor.org/packages/devel/bioc/vignettes/-
#' tximport/inst/doc/tximport.html
#'
#' Prerequisites:
#' - studydesign_onivara_df
#' - studydesign_osativa_df
import_kallisto_transcript_abundance_estimates <- function() {
get_biomart <- function(dataset) {
biomaRt::useMart(
biomart = "plants_mart",
dataset = dataset,
host = "https://plants.ensembl.org")
}
get_tx2gene <- function(dataset) {
biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = get_biomart(dataset)) |>
tibble::as_tibble() |>
dplyr::rename(
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id") |>
dplyr::select("target_id", "gene_name")
}
get_abundance_filepaths <- function(studydsg) {
file.path(studydsg$`Run accession`, "abundance.tsv")
}
get_txigene <- function(dataset, studydsg) {
tximport::tximport(
get_abundance_filepaths(studydsg),
type = "kallisto",
tx2gene = get_tx2gene(dataset),
countsFromAbundance = "lengthScaledTPM")
}
txi_gene_onivara <<- get_txigene(
dataset = "onivara_eg_gene",
studydsg = studydesign_onivara_df)
txi_gene_osativa <<- get_txigene(
dataset = "osativa_eg_gene",
studydsg = studydesign_osativa_df)
}
plot_test <- function(txi_gene) {
txi_gene_abundance <- txi_gene$abundance
transform(
txi_gene_abundance,
SD = matrixStats::rowSds(txi_gene_abundance),
AVG = rowMeans(txi_gene_abundance),
MED = matrixStats::rowMedians(txi_gene_abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = paste(organism, "- Transcripts per million (TPM)"),
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
# Set the project's data subdirectory as the current working directory
setwd(paste0(this.path::here(), "/../data"))
# Read in the studydesign file
create_studydesign_data()
# Import the kallisto "abundance.tsv" files
import_kallisto_transcript_abundance_estimates()
# Plot some TPM statistics about the imported kallisto data
plot_test(txi_gene_onivara)
#' Plot some TPM statistics about the imported kallisto data for Oryza nivara.
plot_txi_gene_stats_onivara() {
#' Plot some TPM statistics about the imported kallisto data for Oryza sativa.
plot_txi_gene_stats_osativa() {
#' Plot some TPM statistics about the imported kallisto data for Oryza nivara.
plot_txi_gene_stats_onivara <- function() {
transform(
txi_gene_onivara$abundance,
SD = matrixStats::rowSds(txi_gene_onivara$abundance),
AVG = rowMeans(txi_gene_onivara$abundance),
MED = matrixStats::rowMedians(txi_gene_onivara$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = "Oryza nivara - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
#' Plot some TPM statistics about the imported kallisto data for Oryza sativa.
plot_txi_gene_stats_osativa <- function() {
transform(
txi_gene_osativa$abundance,
SD = matrixStats::rowSds(txi_gene_osativa$abundance),
AVG = rowMeans(txi_gene_osativa$abundance),
MED = matrixStats::rowMedians(txi_gene_osativa$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = "Oryza sativa - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
# Set the project's data subdirectory as the current working directory
setwd(paste0(this.path::here(), "/../data"))
# Read in the studydesign file
create_studydesign_data()
# Import the kallisto "abundance.tsv" files
import_kallisto_transcript_abundance_estimates()
# Plot some TPM statistics about the imported kallisto data
plot_txi_gene_stats_onivara()
plot_txi_gene_stats_osativa()
# About this script-------------------------------------------------------------
#
# TODO general description
#
# R environment data and values which are commonly used in this script
# in different steps (with [species] = onivara|osativa):
#
# Step 1:
#
# - studydesign_df
# - studydesign_[species]_df
#
# Step 2:
#
# - samples_[species]
# - dgelist_[species]
# - dgecpm_log2_[species]_df
# - dgecpm_log2_[species]_piv
# - dgelist_fltr_[species]
# - dgecpm_fltr_log2_[species]_df
# - dgecpm_fltr_log2_[species]_piv
# - dgelist_fltr_norm_[species]
# - dgecpm_fltr_norm_log2_[species]
# - dgecpm_fltr_norm_log2_[species]_df
# - dgecpm_fltr_norm_log2_[species]_piv
#
# Step 3:
#
# - groups_[species]
# - pca_res_[species]
# - pca_var_[species]
# - pca_per_[species]
# - pca_res_[species]_df
#
# Step 4:
#
# - top_genes_[species]_df
# - dgelist_fltr_norm_voom_[species]
#
# Step 5:
#
# - top_genes_gostres_[species]
# - gmt_[species]
# - camera_[species]_df
#
# File structure requirements:
#
# |                                    <- the project's base directory
# |
# |- data                              <- all research data files
# |
# |- results                           <- research result files & figures
# |
# |- scripts                           <- all script files
#      |
#      |- dge-analysis-PRJCA004229.R   <- this R script
#      |
#      ...
#
# ------------------------------------------------------------------------------
# Load required packages
# ------------------------------------------------------------------------------
# Provides static code analysis for R. It checks for adherence to a given style,
# identifying syntax errors and possible semantic issues
library(lintr)
# For setting the current working directory relative to the filepath
# of this script
library(this.path)
# Tools for Data Copy-Pasta. RStudio addins and R functions that make
# copy-pasting vectors and tables to text painless.
library(datapasta)
# Hadley Wickham's collection of R packages for data science
library(tidyverse)
# To combine multiple plots in one figure
library(cowplot)
# For making interactive plots
library(plotly)
# For making interactive tables
library(DT)
# For annotating the abundance data
library(biomaRt)
# For getting Kallisto results into R
library(tximport)
# For differential expression analysis. Here used for creating DGEList objects
# and for data normalization.
library(edgeR)
# R interface to the g:Profiler tools
library(gprofiler2)
# ------------------------------------------------------------------------------
# Function definitions
# ------------------------------------------------------------------------------
#' Read in the studydesign tsv-file "studydesign-PRJCA004229.tsv".
#'
#' Read in the studydesign tsv-file "studydesign-PRJCA004229.tsv" and
#' create a tibble for the overall studydesign and one tibble for each
#' of the  studydesigns restricted to Oryzy nivara and Oryza sativa.
create_studydesign_data <- function() {
studydesign_df <<- readr::read_tsv(
"studydesign-PRJCA004229.tsv",
col_types = "icccccfffcficfc")
studydesign_onivara_df <<- dplyr::filter(
studydesign_df,
Organism == "Oryza nivara")
studydesign_osativa_df <<- dplyr::filter(
studydesign_df,
Organism == "Oryza sativa")
}
#' Import the kallisto "abundance.tsv" files.
#'
#' The "abundance.tsv" files must be in a subdirectory
#' <studydesign_df$`Run accession`> of the current working
#' directory.
#'
#' See https://bioconductor.org/packages/devel/bioc/vignettes/-
#' tximport/inst/doc/tximport.html
#'
#' Prerequisites:
#' - studydesign_onivara_df
#' - studydesign_osativa_df
import_kallisto_transcript_abundance_estimates <- function() {
get_biomart <- function(dataset) {
biomaRt::useMart(
biomart = "plants_mart",
dataset = dataset,
host = "https://plants.ensembl.org")
}
get_tx2gene <- function(dataset) {
biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = get_biomart(dataset)) |>
tibble::as_tibble() |>
dplyr::rename(
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id") |>
dplyr::select("target_id", "gene_name")
}
get_abundance_filepaths <- function(studydsg) {
file.path(studydsg$`Run accession`, "abundance.tsv")
}
get_txigene <- function(dataset, studydsg) {
tximport::tximport(
get_abundance_filepaths(studydsg),
type = "kallisto",
tx2gene = get_tx2gene(dataset),
countsFromAbundance = "lengthScaledTPM")
}
txi_gene_onivara <<- get_txigene(
dataset = "onivara_eg_gene",
studydsg = studydesign_onivara_df)
txi_gene_osativa <<- get_txigene(
dataset = "osativa_eg_gene",
studydsg = studydesign_osativa_df)
}
#' Plot some TPM statistics about the imported kallisto data for Oryza nivara.
plot_txi_gene_stats_onivara <- function() {
transform(
txi_gene_onivara$abundance,
SD = matrixStats::rowSds(txi_gene_onivara$abundance),
AVG = rowMeans(txi_gene_onivara$abundance),
MED = matrixStats::rowMedians(txi_gene_onivara$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = "Oryza nivara - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
#' Plot some TPM statistics about the imported kallisto data for Oryza sativa.
plot_txi_gene_stats_osativa <- function() {
transform(
txi_gene_osativa$abundance,
SD = matrixStats::rowSds(txi_gene_osativa$abundance),
AVG = rowMeans(txi_gene_osativa$abundance),
MED = matrixStats::rowMedians(txi_gene_osativa$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = "Oryza sativa - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
}
# ------------------------------------------------------------------------------
# Step 1: Import and annotate the Kallisto abundance files
# ------------------------------------------------------------------------------
# Set the project's data subdirectory as the current working directory
setwd(paste0(this.path::here(), "/../data"))
# Read in the studydesign file
create_studydesign_data()
# Import the kallisto "abundance.tsv" files
import_kallisto_transcript_abundance_estimates()
# ------------------------------------------------------------------------------
# Step 2: Filter and normalize the data
# ------------------------------------------------------------------------------
# Plot some TPM statistics about the imported kallisto data
plot_txi_gene_stats_onivara()
plot_txi_gene_stats_osativa()
