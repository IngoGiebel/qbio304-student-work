organism = "Oryza sativa",
log2 = TRUE,
filtered = FALSE,
normalized = FALSE)
plot_cpm_osativa
# Check how many genes have low reads
# Determine how many genes have no reads at all (in none of the samples)
table(rowSums(dgelist_onivara$counts == 0) == length(samples_onivara))
table(rowSums(dgelist_osativa$counts == 0) == length(samples_osativa))
# Determine how many genes have CPMs >= 1 in at least 1, 2, 3, ... samples
sapply(
1L:length(samples_onivara),
function(n) sum(rowSums(cpm_onivara >= 1) >= n))
sapply(
1L:length(samples_osativa),
function(n) sum(rowSums(cpm_osativa >= 1) >= n))
# --- Filter out genes with low reads (< 1 CPM in at least half of the samples)
filter_low_cpm(cpm_thr = 1, sample_perc = 0.5)
sprintf(
"Oryza nivara - genes filtered out: %d out of %d",
nrow(dgelist_onivara) - nrow(dgelist_fltr_onivara),
nrow(dgelist_onivara))
sprintf(
"Oryza sativa - genes filtered out: %d out of %d",
nrow(dgelist_osativa) - nrow(dgelist_fltr_osativa),
nrow(dgelist_osativa))
# Plot the log2 CPM data (filtered, non-normalized)
plot_cpm_fltr_onivara <- plot_cpm(
cpm_piv = cpm_fltr_log2_onivara_piv,
organism = "Oryza nivara",
log2 = TRUE,
filtered = TRUE,
normalized = FALSE)
plot_cpm_fltr_onivara
plot_cpm_fltr_osativa <- plot_cpm(
cpm_piv = cpm_fltr_log2_osativa_piv,
organism = "Oryza sativa",
log2 = TRUE,
filtered = TRUE,
normalized = FALSE)
plot_cpm_fltr_osativa
# --- Normalize the data
normalize_data()
# Plot the log2 CPM data (filtered, normalized)
plot_cpm_fltr_norm_onivara <- plot_cpm(
cpm_piv = cpm_fltr_norm_log2_onivara_piv,
organism = "Oryza nivara",
log2 = TRUE,
filtered = TRUE,
normalized = TRUE)
plot_cpm_fltr_norm_onivara
plot_cpm_fltr_norm_osativa <- plot_cpm(
cpm_piv = cpm_fltr_norm_log2_osativa_piv,
organism = "Oryza sativa",
log2 = TRUE,
filtered = TRUE,
normalized = TRUE)
plot_cpm_fltr_norm_osativa
# --- Combine all six violin plots in one overview plot
cowplot::plot_grid(
plot_cpm_onivara           + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_cpm_osativa           + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
plot_cpm_fltr_onivara      + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_cpm_fltr_osativa      + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
plot_cpm_fltr_norm_onivara + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_cpm_fltr_norm_osativa + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
ncol = 2,
rel_widths = c(2, 1),
labels = c("A", "B", "C", "D", "E", "F"),
label_size = 8)
# ------------------------------------------------------------------------------
# Step 3: Principal component analysis (PCA)
# ------------------------------------------------------------------------------
# Plot cluster dendrogams of the samples - using the euclidean distance of
# filtered and normalized CPM data
plot_hclust(
cpm = cpm_fltr_norm_log2_onivara,
samples = samples_onivara,
organism = "Oryza nivara",
filtered = TRUE,
normalized = TRUE)
plot_hclust(
cpm = cpm_fltr_norm_log2_osativa,
samples = samples_osativa,
organism = "Oryza sativa",
filtered = TRUE,
normalized = TRUE)
# Principal component analysis
do_pca()
# Plot the samples and their contributioh percentage to the first two PCs
plot_pc1_pc2(
pca_res = pca_res_onivara,
samples = samples_onivara,
groups = groups_onivara,
organism = "Oryza nivara")
plot_pc1_pc2(
pca_res = pca_res_osativa,
samples = samples_osativa,
groups = groups_osativa,
organism = "Oryza sativa")
# Make an interactive tables which compare for each gene the medium
# log CPM values of the "normal condition" samples with the
# corresponding values of the "drought stress condition" samples
make_cpm_comparison_table_normal_vs_stress_onivara()
make_cpm_comparison_table_normal_vs_stress_osativa()
# ------------------------------------------------------------------------------
# Step 4: Identify differentially expressed genes (DEGs)
# ------------------------------------------------------------------------------
# Create the design and contrast matrices
create_design_and_contrast_mtx()
# Model mean-variance trend and fit a linear model to the data
model_mean_var_trend_and_fitlm()
# Compute empirical Bayes stats for the contrasts from the linear model fits
compute_ebayes_stats()
# Extract tables of the top-ranked genes from the linear model fits
extract_top_genes_from_lmfit()
# Create an interactive volcano plots of the differentially expressed genes
plot_volcano_top_genes(top_genes_onivara_df, organism = "Oryza nivara")
plot_volcano_top_genes(top_genes_osativa_df, organism = "Oryza sativa")
# Perform limma tests and make Venn diagrams of the DEG test results
# Oryza nivara
test_results_oryza_nivara <- do_limma_test(ebayes_onivara)
summary(test_results_oryza_nivara)
limma::vennDiagram(test_results_oryza_nivara, include = "both")
# Oryza sativa
test_results_oryza_osativa <- do_limma_test(ebayes_osativa)
summary(test_results_oryza_osativa)
limma::vennDiagram(test_results_oryza_osativa, include = "both")
#' Create an interactive table of the DEGs.
create_deg_table <- function(deg_df) {
DT::datatable(
deg_df,
extensions = c("KeyTable", "FixedHeader"),
caption = "DEGs in Oryza nivara",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns = c(2:13), digits = 2)
}
#' Create a heatmap of the DEGs.
create_deg_heatmap <- function(deg_df) {
dplyr::select(deg_df, !1) |>
heatmaply::heatmaply(
xlab = "Samples",
ylab = "DEGs",
main = "DEGs in Oryza nivara",
scale = "column",
margins = c(60, 100, 40, 20),
grid_color = "white",
grid_width = 0.0000001,
titleX = TRUE,
titleY = TRUE,
hide_colorbar = TRUE,
branches_lwd = 0.1,
label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = samples_onivara,
labRow = deg_onivara_df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
}
# Create an interactive table
create_deg_table(deg_onivara_df)
# Extract the expression data of the DEGs
colnames(voom_onivara$E) <- samples_onivara
deg_onivara_df <-
voom_onivara$E[test_results_oryza_nivara[, 1] != 0, ] |>
as_tibble(rownames = "geneID")
# Save the DEGs as a text file
readr::write_tsv(deg_onivara_df, "../results/degs-oryza-nivara.txt")
# Create an interactive table
create_deg_table(deg_onivara_df)
#' Create an interactive table of the DEGs.
create_deg_table <- function(deg_df, organism) {
DT::datatable(
deg_df,
extensions = c("KeyTable", "FixedHeader"),
caption = paste("DEGs in", organism),
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns = c(2:13), digits = 2)
}
#' Create a heatmap of the DEGs.
create_deg_heatmap <- function(deg_df, organism) {
dplyr::select(deg_df, !1) |>
heatmaply::heatmaply(
xlab = "Samples",
ylab = "DEGs",
main = paste("DEGs in", organism),
scale = "column",
margins = c(60, 100, 40, 20),
grid_color = "white",
grid_width = 0.0000001,
titleX = TRUE,
titleY = TRUE,
hide_colorbar = TRUE,
branches_lwd = 0.1,
label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = samples_onivara,
labRow = deg_onivara_df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
}
# Create an interactive table
create_deg_table(deg_onivara_df, "Oryza nivara")
# Create a heatmap
create_deg_heatmap(deg_onivara_df, "Oryza nivara")
# Extract the expression data of the DEGs
colnames(voom_osativa$E) <- samples_osativa
#' Model mean-variance trend and fit a linear model to the data.
model_mean_var_trend_and_fitlm <- function() {
# Oryza nivara
voom_onivara <<- limma::voom(
dgelist_fltr_norm_onivara,
design = model_mtx_onivara,
plot = TRUE)
dgelist_fltr_norm_lmfit_onivara <<- limma::lmFit(
voom_onivara,
design = model_mtx_onivara)
# Oryza sativa
voom_osativa <<- limma::voom(
dgelist_fltr_norm_osativa,
design = model_mtx_osativa,
plot = TRUE)
dgelist_fltr_norm_lmfit_osativa <<- limma::lmFit(
voom_osativa,
design = model_mtx_osativa)
}
model_mean_var_trend_and_fitlm()
# Extract the expression data of the DEGs
colnames(voom_osativa$E) <- samples_osativa
deg_osativa_df <-
voom_osativa$E[test_results_oryza_sativa[, 1] != 0, ] |>
as_tibble(rownames = "geneID")
# Save the DEGs as a text file
readr::write_tsv(deg_osativa_df, "../results/degs-oryza-sativa.txt")
# Create an interactive table
create_deg_table(deg_osativa_df, "Oryza sativa")
# Create an interactive table
create_deg_table(deg_osativa_df, "Oryza sativa")
# Create a heatmap
create_deg_heatmap(deg_osativa_df, "Oryza sativa")
# Create a heatmap
create_deg_heatmap(deg_osativa_df, "Oryza sativa")
# Create an interactive table
deg_osativa_df |>
DT::datatable(
extensions = c("KeyTable", "FixedHeader"),
caption = "DEGs in Oryza sativa",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns = c(2:7), digits = 2)
# Create a heatmap
deg_osativa_df |>
dplyr::select(!1) |>
heatmaply::heatmaply(
xlab = "Samples",
ylab = "DEGs",
main = "DEGs in Oryza sativa",
scale = "column",
margins = c(60, 100, 40, 20),
grid_color = "white",
grid_width = 0.0000001,
titleX = TRUE,
titleY = TRUE,
hide_colorbar = TRUE,
branches_lwd = 0.1,
label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = samples_osativa,
labRow = deg_osativa_df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
# Create an interactive table
create_deg_table(deg_osativa_df, "Oryza sativa")
# Create a heatmap
create_deg_heatmap(deg_osativa_df, "Oryza sativa")
# Create an interactive table
deg_osativa_df |>
DT::datatable(
extensions = c("KeyTable", "FixedHeader"),
caption = "DEGs in Oryza sativa",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns = c(2:7), digits = 2)
#' Create an interactive table of the DEGs.
create_deg_table <- function(deg_df, organism) {
DT::datatable(
deg_df,
extensions = c("KeyTable", "FixedHeader"),
caption = paste("DEGs in", organism),
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns = c(2:ncol(deg_df)), digits = 2)
}
#' Create a heatmap of the DEGs.
create_deg_heatmap <- function(deg_df, samples, organism) {
dplyr::select(deg_df, !1) |>
heatmaply::heatmaply(
xlab = "Samples",
ylab = "DEGs",
main = paste("DEGs in", organism),
scale = "column",
margins = c(60, 100, 40, 20),
grid_color = "white",
grid_width = 0.0000001,
titleX = TRUE,
titleY = TRUE,
hide_colorbar = TRUE,
branches_lwd = 0.1,
label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = samples,
labRow = deg_df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
}
# Create an interactive table
create_deg_table(
deg_onivara_df,
samples = samples_onivara,
organism = "Oryza nivara")
# Create an interactive table
create_deg_table(
deg_onivara_df,
samples = samples_onivara)
# Create an interactive table
create_deg_table(
deg_onivara_df,
organism = "Oryza nivara")
# Create a heatmap
create_deg_heatmap(
deg_onivara_df,
samples = samples_onivara,
organism = "Oryza nivara")
# Extract the expression data of the DEGs
colnames(voom_osativa$E) <- samples_osativa
deg_osativa_df <-
voom_osativa$E[test_results_oryza_sativa[, 1] != 0, ] |>
as_tibble(rownames = "geneID")
# Save the DEGs as a text file
readr::write_tsv(deg_osativa_df, "../results/degs-oryza-sativa.txt")
# Create an interactive table
create_deg_table(
deg_osativa_df,
organism = "Oryza sativa")
# Create a heatmap
create_deg_heatmap(
deg_osativa_df,
samples = samples_osativa,
organism = "Oryza sativa")
# Create a heatmap
deg_osativa_df |>
dplyr::select(!1) |>
heatmaply::heatmaply(
xlab = "Samples",
ylab = "DEGs",
main = "DEGs in Oryza sativa",
scale = "column",
margins = c(60, 100, 40, 20),
grid_color = "white",
grid_width = 0.0000001,
titleX = TRUE,
titleY = TRUE,
hide_colorbar = TRUE,
branches_lwd = 0.1,
label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = samples_osativa,
labRow = deg_osativa_df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
# Create a heatmap
create_deg_heatmap(
deg_osativa_df,
samples = samples_osativa,
organism = "Oryza sativa")
source("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/scripts/dge-analysis-PRJCA004229.R", echo=TRUE)
# Functional enrichment analysis of the 100 top-ranked genes
top_genes_gostres_onivara <- gprofiler2::gost(
top_genes_onivara_df$geneID[1:100],
organism = "onivara",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_genes_gostres_onivara,
interactive = TRUE,
capped = FALSE)
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_genes_gostres_onivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_genes_gostres_onivara$result$term_id[1:10])
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_genes_gostres_onivara,
highlight_terms = top_genes_gostres_onivara$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
# Functional enrichment analysis of the 100 top-ranked genes
top_genes_gostres_osativa <- gprofiler2::gost(
top_genes_osativa_df$geneID[1:100],
organism = "osativa",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_genes_gostres_osativa,
interactive = TRUE,
capped = FALSE)
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_genes_gostres_osativa,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_genes_gostres_osativa$result$term_id[1:10])
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_genes_gostres_osativa,
highlight_terms = top_genes_gostres_osativa$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
source("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/scripts/dge-analysis-PRJCA004229.R", echo=TRUE)
# Extract the expression data of the DEGs
colnames(voom_osativa$E) <- samples_osativa
deg_osativa_df <-
voom_osativa$E[test_results_oryza_osativa[, 1] != 0, ] |>
as_tibble(rownames = "geneID")
# Save the DEGs as a text file
readr::write_tsv(deg_osativa_df, "../results/degs-oryza-sativa.txt")
# Create an interactive table
create_deg_table(
deg_osativa_df,
organism = "Oryza sativa")
# Create a heatmap
create_deg_heatmap(
deg_osativa_df,
samples = samples_osativa,
organism = "Oryza sativa")
# Functional enrichment analysis of the 100 top-ranked genes
top_genes_gostres_onivara <- gprofiler2::gost(
top_genes_onivara_df$geneID[1:100],
organism = "onivara",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_genes_gostres_onivara,
interactive = TRUE,
capped = FALSE)
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_genes_gostres_onivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_genes_gostres_onivara$result$term_id[1:10])
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_genes_gostres_onivara,
highlight_terms = top_genes_gostres_onivara$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
# Functional enrichment analysis of the 100 top-ranked genes
top_genes_gostres_osativa <- gprofiler2::gost(
top_genes_osativa_df$geneID[1:100],
organism = "osativa",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_genes_gostres_osativa,
interactive = TRUE,
capped = FALSE)
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_genes_gostres_osativa,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_genes_gostres_osativa$result$term_id[1:10])
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_genes_gostres_osativa,
highlight_terms = top_genes_gostres_osativa$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
source("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/scripts/dge-analysis-PRJCA004229.R", echo=TRUE)
View(create_deg_table)
View(create_deglists_and_cpms)
View(create_design_and_contrast_mtx)
View(do_limma_test)
View(create_deg_heatmap)
View(plot_hclust)
View(import_kallisto_transcript_abundance_estimates)
View(create_deg_heatmap)
source("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/scripts/dge-analysis-PRJCA004229.R", echo=TRUE)
