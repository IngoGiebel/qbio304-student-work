rowSums(cpm_onivara >= cpm_thr) >= length(samples_onivara) * sample_perc, ]
# Compute counts per million (CPM) and their respective log2 values
cpm_fltr_log2_onivara_df <<- cpm_log2_df(
dgelist_fltr_onivara,
samples_onivara)
cpm_fltr_log2_onivara_piv <<- pivot_cpm_df(
cpm_fltr_log2_onivara_df,
samples_onivara)
# Oryza sativa
# Create a DGElist object
dgelist_fltr_osativa <<- dgelist_osativa[
rowSums(cpm_osativa >= cpm_thr) >= length(samples_osativa) * sample_perc, ]
# Compute counts per million (CPM) and their respective log2 values
cpm_fltr_log2_osativa_df <<- cpm_log2_df(
dgelist_fltr_osativa,
samples_osativa)
cpm_fltr_log2_osativa_piv <<- pivot_cpm_df(
cpm_fltr_log2_osativa_df,
samples_osativa)
}
#' Normalize the filtered data.
normalize_data <- function() {
# Oryza nivara
# Compute scaling factors to convert observed library sizes into
# effective library sizes
dgelist_fltr_norm_onivara <<- edgeR::calcNormFactors(
dgelist_fltr_onivara,
method = "TMM")
# Compute counts per million (CPM) and their respective log2 values
cpm_fltr_norm_log2_onivara <<- edgeR::cpm(
dgelist_fltr_norm_onivara,
log = TRUE)
cpm_fltr_norm_log2_onivara_df <<- cpm_df(
cpm_fltr_norm_log2_onivara,
samples_onivara)
cpm_fltr_norm_log2_onivara_piv <<- pivot_cpm_df(
cpm_fltr_norm_log2_onivara_df,
samples_onivara)
# Oryza sativa
# Compute scaling factors to convert observed library sizes into
# effective library sizes
dgelist_fltr_norm_osativa <<- edgeR::calcNormFactors(
dgelist_fltr_osativa,
method = "TMM")
# Compute counts per million (CPM) and their respective log2 values
cpm_fltr_norm_log2_osativa <<- edgeR::cpm(
dgelist_fltr_norm_osativa,
log = TRUE)
cpm_fltr_norm_log2_osativa_df <<- cpm_df(
cpm_fltr_norm_log2_osativa,
samples_osativa)
cpm_fltr_norm_log2_osativa_piv <<- pivot_cpm_df(
cpm_fltr_norm_log2_osativa_df,
samples_osativa)
}
#' Plot a cluster dendrogram of the samples.
plot_hclust <- function(cpm, samples, organism, filtered, normalized) {
plot(
hclust(
cpm |> t() |> dist(method = "euclidean"),
method = "complete"),
labels = samples,
main = paste(organism, "- Cluster Dendogram"),
xlab = "euclidean distance",
sub = paste0(
if (filtered) "filtered" else "unfiltered", ", ",
if (normalized) "normalized" else "non-normalized",
" data"))
}
#' Do a principal component analysis (PCA).
do_pca <- function() {
# Function definitions
compute_pca_res <- function(cpm) {
t(cpm)|> prcomp(scale = FALSE, retx = TRUE)
}
# Oryza nivara
pca_res_onivara <<- compute_pca_res(cpm_fltr_norm_log2_onivara)
# Oryza sativa
pca_res_osativa <<- compute_pca_res(cpm_fltr_norm_log2_osativa)
}
#' Plot the samples and their contributioh percentage to the first two PCs.
plot_pc1_pc2 <- function(pca_res, samples, groups, organism) {
# Percentage variance explained by each PC
pca_pct <- round(pca_res$sdev^2 * 100 / sum(pca_res$sdev^2), 1)
# Create the plot
ggplot2::ggplot(tibble::as_tibble(pca_res$x)) +
ggplot2::aes(x = PC1, y = PC2, label = samples, color = groups) +
ggplot2::geom_point(size = 4) +
ggrepel::geom_text_repel(nudge_x = 10, nudge_y = 5) +
ggplot2::stat_ellipse() +
ggplot2::xlab(paste0("PC1 (", pca_pct[1], "%", ")")) +
ggplot2::ylab(paste0("PC2 (", pca_pct[2], "%", ")")) +
ggplot2::labs(colour = "group") +
ggplot2::ggtitle(paste0(organism, " - PCA plot")) +
ggplot2::theme_bw()
}
#' Make an interactive table which compares for each gene the medium filtered
#' and normalized log CPM values of the "normal condition" samples with the
#' corresponding values of the "drought stress condition" samples.
make_cpm_comparison_table_normal_vs_stress_onivara <- function() {
cpm_fltr_norm_log2_onivara_df |>
rowwise() |>
summarize(
geneID,
normal.AVG = (BJ278C1 + BJ278C2 + BJ278C3 + BJ89C1 + BJ89C2 + BJ89C3) / 6,
stress.AVG = (BJ278P1 + BJ278P2 + BJ278P3 + BJ89P1 + BJ89P2 + BJ89P3) / 6,
LogFC = stress.AVG - normal.AVG) |>
dplyr::arrange(dplyr::desc(LogFC)) |>
DT::datatable(
caption = "Oryza nivara - CPM comparison normal vs draught stress",
extensions = c("KeyTable", "FixedHeader"),
filter = "top",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(2:4)
}
#' Make an interactive table which compares for each gene the medium filtered
#' and normalized log CPM values of the "normal condition" samples with the
#' corresponding values of the "drought stress condition" samples.
make_cpm_comparison_table_normal_vs_stress_osativa <- function() {
cpm_fltr_norm_log2_osativa_df |>
rowwise() |>
summarize(
geneID,
normal.AVG = (NC1 + NC2 + NC1) / 3,
stress.AVG = (NP1 + NP2 + NP3) / 3,
LogFC = stress.AVG - normal.AVG) |>
dplyr::arrange(dplyr::desc(LogFC)) |>
DT::datatable(
caption = "Oryza sativa - CPM comparison normal vs draught stress",
extensions = c("KeyTable", "FixedHeader"),
filter = "top",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(2:4)
}
#' Create the design and contrast matrices.
create_design_and_contrast_mtx <- function() {
# Oryza nivara
model_mtx_onivara <<- model.matrix(~0 + groups_onivara)
colnames(model_mtx_onivara) <<- make.names(levels(groups_onivara))
contrast_mtx_onivara <<- limma::makeContrasts(
stress = drought.stress.condition - normal.condition,
levels = model_mtx_onivara)
# Oryza sativa
model_mtx_osativa <<- model.matrix(~0 + groups_osativa)
colnames(model_mtx_osativa) <<- make.names(levels(groups_osativa))
contrast_mtx_osativa <<- limma::makeContrasts(
stress = drought.stress.condition - normal.condition,
levels = model_mtx_osativa)
}
#' Model mean-variance trend and fit a linear model to the data.
model_mean_var_trend_and_fitlm <- function() {
# Oryza nivara
voom_onivara <<- limma::voom(
dgelist_fltr_norm_onivara,
design = model_mtx_onivara,
plot = TRUE)
dgelist_fltr_norm_lmfit_onivara <<- limma::lmFit(
voom_onivara,
design = model_mtx_onivara)
# Oryza sativa
voom_osativa <<- limma::voom(
dgelist_fltr_norm_osativa,
design = model_mtx_osativa,
plot = TRUE)
dgelist_fltr_norm_lmfit_osativa <<- limma::lmFit(
voom_osativa,
design = model_mtx_osativa)
}
#'
#' Computed statistics:
#' - log FC      : log2-fold-change corresponding to the contrast
#' - AveExpr     : average log2-expression
#' - t           : moderated t-statistic: ratio of the logFC to the standard
#'                 error (where the error has been moderated across all genes
#'                 because of Bayesian approach)
#' - P.Value     : raw p-value
#' - adj.P.Value : adjusted p-value (by BH)
#' - B           : log-odds that the gene is differentially expressed
compute_ebayes_stats <- function() {
# Oryza nivara
ebayes_onivara <<-
dgelist_fltr_norm_lmfit_onivara |>
limma::contrasts.fit(contrasts = contrast_mtx_onivara) |>
limma::eBayes()
# Oryza sativa
ebayes_osativa <<-
dgelist_fltr_norm_lmfit_osativa |>
limma::contrasts.fit(contrasts = contrast_mtx_osativa) |>
limma::eBayes()
}
#' Extract tables of the top-ranked genes from the linear model fits.
extract_top_genes_from_lmfit <- function() {
# Function definitions
top_genes <- function(ebayes) {
limma::topTable(
ebayes,
adjust.method = "BH",
coef = 1,
number = 100000,
sort.by = "logFC") |>
tibble::as_tibble(rownames = "geneID")
}
# Oryza nivara
top_genes_onivara_df <<- top_genes(ebayes_onivara)
# Oryza sativa
top_genes_osativa_df <<- top_genes(ebayes_osativa)
}
#' Create an interactive volcano plot of the differentially expressed genes.
plot_volcano_top_genes <- function(top_genes_df, organism) {
(top_genes_df |>
ggplot2::ggplot() +
ggplot2::aes(x = logFC, y = -log10(adj.P.Val), text = geneID) +
ggplot2::geom_point(size = 0.2) +
ggplot2::geom_hline(
yintercept = -log10(0.01),
linetype = "longdash",
colour= "grey",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = 1,
linetype ="longdash",
colour = "coral",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = -1,
linetype = "longdash",
colour = "cadetblue",
linewidth = 1) +
ggplot2::annotate(
"rect",
xmin = 1,
xmax = 12,
ymin = -log10(0.01),
ymax = 7.5,
alpha = .2,
fill = "coral") +
ggplot2::annotate(
"rect",
xmin = -1,
xmax = -12,
ymin = -log10(0.01),
ymax = 7.5,
alpha=.2,
fill = "cadetblue") +
ggplot2::ggtitle(paste0(organism, " - volcano plot")) +
ggplot2::theme_bw()) |>
plotly::ggplotly()
}
#' Perform limma test for the empirical Bayes stats.
do_limma_test <- function(ebayes) {
limma::decideTests(
ebayes,
method = "global",
adjust.method = "BH",
p.value = 0.01,
lfc = 7)
}
#' Create an interactive table of the DEGs.
create_deg_table <- function(deg_df, organism) {
DT::datatable(
deg_df,
extensions = c("KeyTable", "FixedHeader"),
caption = paste("DEGs in", organism),
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 100000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns = c(2:ncol(deg_df)), digits = 2)
}
#' Create a heatmap of the DEGs.
create_deg_heatmap <- function(deg_df, samples, organism) {
dplyr::select(deg_df, !1) |>
heatmaply::heatmaply(
xlab = "Samples",
ylab = "DEGs",
main = paste("DEGs in", organism),
scale = "column",
margins = c(60, 100, 40, 20),
grid_color = "white",
grid_width = 0.0000001,
titleX = TRUE,
titleY = TRUE,
hide_colorbar = TRUE,
branches_lwd = 0.1,
label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = samples,
labRow = deg_df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
}
# Set the project's data subdirectory as the current working directory
setwd(paste0(this.path::here(), "/../data"))
# Read in the studydesign file
create_studydesign_data()
# Import the kallisto "abundance.tsv" files
import_kallisto_transcript_abundance_estimates()
# Plot some TPM statistics about the imported kallisto data
plot_txi_gene_stats_onivara()
plot_txi_gene_stats_osativa()
# Create DGElist objects and compute counts per million (CPM) and their
# respective log2 values
create_deglists_and_cpms()
# Plot the log2 CPM data (unfiltered, non-normalized)
plot_cpm_onivara <- plot_cpm(
cpm_piv = cpm_log2_onivara_piv,
organism = "Oryza nivara",
log2 = TRUE,
filtered = FALSE,
normalized = FALSE)
plot_cpm_onivara
plot_cpm_osativa <- plot_cpm(
cpm_piv = cpm_log2_osativa_piv,
organism = "Oryza sativa",
log2 = TRUE,
filtered = FALSE,
normalized = FALSE)
plot_cpm_osativa
# Determine how many genes have no reads at all (in none of the samples)
table(rowSums(dgelist_onivara$counts == 0) == length(samples_onivara))
table(rowSums(dgelist_osativa$counts == 0) == length(samples_osativa))
# Determine how many genes have CPMs >= 1 in at least 1, 2, 3, ... samples
sapply(
1L:length(samples_onivara),
function(n) sum(rowSums(cpm_onivara >= 1) >= n))
sapply(
1L:length(samples_osativa),
function(n) sum(rowSums(cpm_osativa >= 1) >= n))
# Plot the log2 CPM data (filtered, non-normalized)
plot_cpm_fltr_onivara <- plot_cpm(
cpm_piv = cpm_fltr_log2_onivara_piv,
organism = "Oryza nivara",
log2 = TRUE,
filtered = TRUE,
normalized = FALSE)
plot_cpm_fltr_onivara
plot_cpm_fltr_osativa <- plot_cpm(
cpm_piv = cpm_fltr_log2_osativa_piv,
organism = "Oryza sativa",
log2 = TRUE,
filtered = TRUE,
normalized = FALSE)
plot_cpm_fltr_osativa
# Normalize the data
normalize_data()
# Plot the log2 CPM data (filtered, normalized)
plot_cpm_fltr_norm_onivara <- plot_cpm(
cpm_piv = cpm_fltr_norm_log2_onivara_piv,
organism = "Oryza nivara",
log2 = TRUE,
filtered = TRUE,
normalized = TRUE)
plot_cpm_fltr_norm_onivara
plot_cpm_fltr_norm_osativa <- plot_cpm(
cpm_piv = cpm_fltr_norm_log2_osativa_piv,
organism = "Oryza sativa",
log2 = TRUE,
filtered = TRUE,
normalized = TRUE)
plot_cpm_fltr_norm_osativa
# Combine all six violin plots in one overview plot
cowplot::plot_grid(
plot_cpm_onivara           + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_cpm_osativa           + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
plot_cpm_fltr_onivara      + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_cpm_fltr_osativa      + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
plot_cpm_fltr_norm_onivara + ggplot2::ggtitle("Oryza nivara - Log2 CPM"),
plot_cpm_fltr_norm_osativa + ggplot2::ggtitle("Oryza sativa - Log2 CPM"),
ncol = 2,
rel_widths = c(2, 1),
labels = c("A", "B", "C", "D", "E", "F"),
label_size = 8)
# Plot cluster dendrogams of the samples - using the euclidean distance of
# filtered and normalized CPM data
plot_hclust(
cpm = cpm_fltr_norm_log2_onivara,
samples = samples_onivara,
organism = "Oryza nivara",
filtered = TRUE,
normalized = TRUE)
plot_hclust(
cpm = cpm_fltr_norm_log2_osativa,
samples = samples_osativa,
organism = "Oryza sativa",
filtered = TRUE,
normalized = TRUE)
# Principal component analysis
do_pca()
# Plot the samples and their contributioh percentage to the first two PCs
plot_pc1_pc2(
pca_res = pca_res_onivara,
samples = samples_onivara,
groups = groups_onivara,
organism = "Oryza nivara")
plot_pc1_pc2(
pca_res = pca_res_osativa,
samples = samples_osativa,
groups = groups_osativa,
organism = "Oryza sativa")
# Make an interactive tables which compare for each gene the medium
# log CPM values of the "normal condition" samples with the
# corresponding values of the "drought stress condition" samples
make_cpm_comparison_table_normal_vs_stress_onivara()
fontawesome::fa_install()
make_cpm_comparison_table_normal_vs_stress_osativa()
# Create the design and contrast matrices
create_design_and_contrast_mtx()
# Model mean-variance trend and fit a linear model to the data
model_mean_var_trend_and_fitlm()
# Compute empirical Bayes stats for the contrasts from the linear model fits
compute_ebayes_stats()
# Extract tables of the top-ranked genes from the linear model fits
extract_top_genes_from_lmfit()
# Create an interactive volcano plots of the differentially expressed genes
plot_volcano_top_genes(top_genes_onivara_df, organism = "Oryza nivara")
plot_volcano_top_genes(top_genes_osativa_df, organism = "Oryza sativa")
# Perform limma tests and make Venn diagrams of the DEG test results
# Oryza nivara
test_results_oryza_nivara <- do_limma_test(ebayes_onivara)
summary(test_results_oryza_nivara)
limma::vennDiagram(test_results_oryza_nivara, include = "both")
# Oryza sativa
test_results_oryza_osativa <- do_limma_test(ebayes_osativa)
summary(test_results_oryza_osativa)
limma::vennDiagram(test_results_oryza_osativa, include = "both")
# Extract the expression data of the DEGs
colnames(voom_onivara$E) <- samples_onivara
deg_onivara_df <-
voom_onivara$E[test_results_oryza_nivara[, 1] != 0, ] |>
as_tibble(rownames = "geneID")
# Save the DEGs as a text file
readr::write_tsv(deg_onivara_df, "../results/degs-oryza-nivara.txt")
# Create an interactive table
create_deg_table(
deg_onivara_df,
organism = "Oryza nivara")
# Create a heatmap
create_deg_heatmap(
deg_onivara_df,
samples = samples_onivara,
organism = "Oryza nivara")
# Extract the expression data of the DEGs
colnames(voom_osativa$E) <- samples_osativa
deg_osativa_df <-
voom_osativa$E[test_results_oryza_osativa[, 1] != 0, ] |>
as_tibble(rownames = "geneID")
# Save the DEGs as a text file
readr::write_tsv(deg_osativa_df, "../results/degs-oryza-sativa.txt")
# Create an interactive table
create_deg_table(
deg_osativa_df,
organism = "Oryza sativa")
# Create a heatmap
create_deg_heatmap(
deg_osativa_df,
samples = samples_osativa,
organism = "Oryza sativa")
# Functional enrichment analysis of the 100 top-ranked genes
top_genes_gostres_onivara <- gprofiler2::gost(
top_genes_onivara_df$geneID[1:100],
organism = "onivara",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_genes_gostres_onivara,
interactive = TRUE,
capped = FALSE)
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_genes_gostres_onivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_genes_gostres_onivara$result$term_id[1:10])
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_genes_gostres_onivara,
highlight_terms = top_genes_gostres_onivara$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
# Functional enrichment analysis of the 100 top-ranked genes
top_genes_gostres_osativa <- gprofiler2::gost(
top_genes_osativa_df$geneID[1:100],
organism = "osativa",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_genes_gostres_osativa,
interactive = TRUE,
capped = FALSE)
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_genes_gostres_osativa,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_genes_gostres_osativa$result$term_id[1:10])
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_genes_gostres_osativa,
highlight_terms = top_genes_gostres_osativa$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
