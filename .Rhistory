label_names = c("Gene", "Sample:", "Value"),
fontsize_row = 5,
fontsize_col = 5,
labCol = colnames(diffGenes.df)[2:11],
labRow = diffGenes.df$geneID,
heatmap_layers = theme(axis.line = element_blank()))
# OPTIONAL: differential transcript usage (DTU) analysis -----------------------
# # The IsoformSwitchAnalyzeR package looks for certain column headers in our
# # study design
# # So, the first step is to make sure our study design contains the following:
# # unique sample IDs must be contained in column called 'sampleID'
# # covariate(s) of interest must be in column labeled 'condition'
# # remove extraneous columns
# targets.mod <- targets |>
#   dplyr::rename(sampleID = sample, condition = group) |>
#   dplyr::select(sampleID, condition)
#
# # import transcript Kallisto quant data
# # using the same path variable we set way back in the step 1 script
# Txi_trans <- importIsoformExpression(sampleVector = path)
#
# # fix column headers of abundance and counts data to match sampleID in target.mod
# colnames(Txi_trans$abundance) <- c("isoform_id", sampleLabels)
# colnames(Txi_trans$counts) <- c("isoform_id", sampleLabels)
#
# # import data
# mySwitchList <- IsoformSwitchAnalyzeR::importRdata(
#   isoformCountMatrix   = Txi_trans$counts,
#   isoformRepExpression = Txi_trans$abundance,
#   designMatrix         = targets.mod,
#   removeNonConvensionalChr = TRUE,
#   addAnnotatedORFs=TRUE,
#   ignoreAfterPeriod=TRUE,
#   # the files below must be from the same ensembl release
#   # (in this case release 108), and must match the reference release version
#   # that we originally mapped our reads to at the beginning of the course
#   # you can find version 108 of the gtf file below here:
#   # https://ftp.ensembl.org/pub/release-108/gtf/homo_sapiens/
#   isoformExonAnnoation = "Homo_sapiens.GRCh38.108.chr_patch_hapl_scaff.gtf.gz",
#   isoformNtFasta       = "Homo_sapiens.GRCh38.cdna.all.fa",
#   showProgress = TRUE)
#
# # Error in IsoformSwitchAnalyzeR::importRdata(isoformCountMatrix
# # = Txi_trans$counts,  : At least one of the file(s) pointed to with
# # 'isoformNtFasta' seems not to exist.
#
# # We'll do the isoform analysis in one step, but there's a lot to unpack here,
# # so you should really read the package documentation at:
# # https://bioconductor.org/packages/release/bioc/vignettes/
# # IsoformSwitchAnalyzeR/inst/doc/IsoformSwitchAnalyzeR.html
# # Note that without additional manual work here (beyond the scope of this
# # class), we'll only capture isoform annotations for
# # 1) intron retention;
# # 2) ORF sequence similarity; and
# # 3) nonsense mediate decay (NMD)
#
# #NOTE: THIS NEXT BIT COULD TAKE A WHILE!
# mySwitchList <- IsoformSwitchAnalyzeR::isoformSwitchAnalysisCombined(
#   switchAnalyzeRlist   = mySwitchList,
#   pathToOutput = 'isoform_output') # directory must already exist
#
# # now look at the directory that you just created above
# # in case you missed the summary output from the function above
# IsoformSwitchAnalyzeR::extractSwitchSummary(mySwitchList)
#
# # extract the top n isoform switching events
# IsoformSwitchAnalyzeR::extractTopSwitches(
#   mySwitchList,
#   filterForConsequences = TRUE, # these 'consequences' related to the annotations I reference above.
#   n = 50,
#   sortByQvals = FALSE) #change to TRUE if you want this list sorted by FDR-adusted Pval (a.k.a., q value)
#
# # visualize by making a 'switch plot'
# IsoformSwitchAnalyzeR::switchPlot(
#   mySwitchList,
#   gene='FCGR3B',
#   condition1 = 'disease',
#   condition2 = 'healthy',
#   localTheme = theme_bw())
# Step 4: the essentials -------------------------------------------------------
library(tidyverse)
library(limma)
library(edgeR)
library(gt)
library(DT)
library(plotly)
# Set up your design matrix
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Model mean-variance trend and fit linear model to data
# Use VOOM function from Limma package to model the mean-variance relationship
v.DEGList.filtered.norm <- limma::voom(
myDGEList.filtered.norm,
design = design)
# Fit a linear model to your data
fit <- limma::lmFit(v.DEGList.filtered.norm, design = design)
# Contrast matrix
contrast.matrix <- limma::makeContrasts(
infection = disease - healthy,
levels = design)
# Extract the linear model fit
fits <- limma::contrasts.fit(fit, contrast.matrix)
# Get bayesian stats for your linear model fit
ebFit <- limma::eBayes(fits)
# TopTable to view DEGs
myTopHits <- limma::topTable(
ebFit,
adjust.method = "BH",
coef = 1,
number = 40000,
sort.by = "logFC")
myTopHits.df <- myTopHits |> tibble::as_tibble(rownames = "geneID")
vplot <-
ggplot2::ggplot(myTopHits.df) +
ggplot2::aes(x = logFC, y = -log10(adj.P.Val), text = geneID) +
ggplot2::geom_point(size = 0.2) +
ggplot2::geom_hline(
yintercept = -log10(0.01),
linetype = "longdash",
colour= "grey",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = 1,
linetype ="longdash",
colour = "coral",
linewidth = 1) +
ggplot2::geom_vline(
xintercept = -1,
linetype = "longdash",
colour = "cadetblue",
linewidth = 1) +
ggplot2::annotate(
"rect",
xmin = 1,
xmax = 12,
ymin = -log10(0.01),
ymax = 7.5,
alpha = .2,
fill = "coral") +
ggplot2::annotate(
"rect",
xmin = -1,
xmax = -12,
ymin = -log10(0.01),
ymax = 7.5,
alpha=.2,
fill = "cadetblue") +
ggplot2::labs(
title = "Volcano plot",
subtitle = "Cutaneous leishmaniasis",
caption = paste0("produced on ", Sys.time())) +
ggplot2::theme_bw()
# Interactive volcano plot
plotly::ggplotly(vplot)
# Pull out the DEGs and make a Venn Diagram
results <- limma::decideTests(
ebFit,
method = "global",
adjust.method = "BH",
p.value = 0.01,
lfc = 7)
limma::vennDiagram(results, include = "both")
colnames(v.DEGList.filtered.norm$E) <- sampleLabels
diffGenes <- v.DEGList.filtered.norm$E[results[, 1] != 0,]
diffGenes.df <- as_tibble(diffGenes, rownames = "geneID")
# Create interactive tables to display your DEGs
DT::datatable(
diffGenes.df,
extensions = c("KeyTable", "FixedHeader"),
caption = "Table 1: DEGs in cutaneous leishmaniasis",
options = list(
keys = TRUE,
searchHighlight = TRUE,
pageLength = 10000,
lengthMenu = c("10", "25", "50", "100"))) |>
DT::formatRound(columns=c(2:11), digits=2)
myTopHits <- limma::topTable(
ebFit,
adjust.method = "BH",
coef = 1,
number = 50,
sort.by = "logFC")
# Functional enrichment analysis of the top-ranked genes
gost.res <- gprofiler2::gost(
rownames(myTopHits),
organism = "hsapiens",
correction_method = "fdr")
View(gost.res)
View(top_ranked_genes_ghost_oryza_nivara)
# Produce an interactive manhattan plot of enriched GO terms.
# Set 'interactive = FALSE' to get plot for publications.
gprofiler2::gostplot(gost.res, interactive = TRUE, capped = FALSE)
# Produce an interactive manhattan plot
gprofiler2::gostplot(
top_ranked_genes_ghost_oryza_nivara,
interactive = TRUE,
capped = FALSE)
# Functional enrichment analysis of the 100 top-ranked genes
top_ranked_genes_ghost_oryza_nivara <- gprofiler2::gost(
top_ranked_genes_oryza_nivara_df$geneID[1:50],
organism = "onivara",
correction_method = "fdr")
# Functional enrichment analysis of the 100 top-ranked genes
top_ranked_genes_ghost_oryza_nivara <- gprofiler2::gost(
top_ranked_genes_oryza_nivara_df$geneID[1:100],
organism = "onivara",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_ranked_genes_ghost_oryza_nivara,
interactive = TRUE,
capped = FALSE)
# Functional enrichment analysis of the 500 top-ranked genes
top_ranked_genes_ghost_oryza_nivara <- gprofiler2::gost(
top_ranked_genes_oryza_nivara_df$geneID[1:500],
organism = "onivara",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_ranked_genes_ghost_oryza_nivara,
interactive = TRUE,
capped = FALSE)
# Functional enrichment analysis of the 100 top-ranked genes
top_ranked_genes_ghost_oryza_nivara <- gprofiler2::gost(
top_ranked_genes_oryza_nivara_df$geneID[1:100],
organism = "onivara",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_ranked_genes_ghost_oryza_nivara,
interactive = TRUE,
capped = FALSE)
# Produce a publication quality static manhattan plot
# with specific GO terms highlighted.
# Rerun the above gostplot function with 'interactive = FALSE'
# and save to an object 'mygostplot'
mygostplot = gprofiler2::gostplot(gost.res, interactive = FALSE, capped = FALSE)
gprofiler2::publish_gostplot(
# your static gostplot from above
mygostplot,
highlight_terms = c("GO:0034987"),
filename = NULL,
width = NA,
height = NA)
top_ranked_genes_ghost_oryza_nivara$result$term_id
# Produce and save a publication quality static manhattan plot
# with specific GO terms highlighted.
# Rerun the above gostplot function with 'interactive = FALSE'
# and save to an object 'mygostplot'
mygostplot = gprofiler2::gostplot(gost.res, interactive = FALSE, capped = FALSE)
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = top_ranked_genes_ghost_oryza_nivara$result$term_id,
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = top_ranked_genes_ghost_oryza_nivara$result$term_id[1:10],
filename = "gostplot_oryza_nivara")
top_ranked_genes_ghost_oryza_nivara$result$term_id[1:10]
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = c("GO:0010033", "GO:1901700", "GO:0001101"),
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = c("GO:0010033"),
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = c("GO:0010033"),
filename = "gostplot_oryza_nivara")
# Functional enrichment analysis of the 100 top-ranked genes
top_ranked_genes_ghost_oryza_nivara <- gprofiler2::gost(
top_ranked_genes_oryza_nivara_df$geneID[1:100],
organism = "onivara",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_ranked_genes_ghost_oryza_nivara,
interactive = TRUE,
capped = FALSE)
# Produce and save a publication quality static manhattan plot
# with specific GO terms highlighted.
# Rerun the above gostplot function with 'interactive = FALSE'
# and save to an object 'mygostplot'
mygostplot = gprofiler2::gostplot(
top_ranked_genes_ghost_oryza_nivara,
interactive = FALSE,
capped = FALSE)
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = c("GO:0010033"),
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = top_ranked_genes_ghost_oryza_nivara$result$term_id[1:10],
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = top_ranked_genes_ghost_oryza_nivara$result$term_id,
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = top_ranked_genes_ghost_oryza_nivara$result$term_id[1:20],
filename = "gostplot_oryza_nivara")
# Functional enrichment analysis of the 100 top-ranked genes
top_ranked_genes_ghostres_oryza_nivara <- gprofiler2::gost(
top_ranked_genes_oryza_nivara_df$geneID[1:100],
organism = "onivara",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = TRUE,
capped = FALSE)
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
mygostplot = gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE)
gprofiler2::publish_gostplot(
mygostplot,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10],
filename = "gostplot_oryza_nivara")
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10],
filename = "gostplot_oryza_nivara")
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
top_ranked_genes_ghostplot_oryza_nivara = gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE)
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10],
filename = "gostplot_oryza_nivara")
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
top_ranked_genes_ghostplot_oryza_nivara = gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE)
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10],
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:5],
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:5],
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara,
# highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:5],
filename = "gostplot_oryza_nivara")
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara)
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:5])
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:20])
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10])
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
top_ranked_genes_ghostplot_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10])
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
# top_ranked_genes_ghostplot_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10])
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10])
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10],
filename = "/mnt/c/Users/ingog/gostplot_oryza_nivara")
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10],
filename = "/mnt/c/Users/ingog/gostplot_oryza_nivara.png")
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10],
filename = "gostplot_oryza_nivara.png")
setwd("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/Exercise-Data-Analysis - Homo-sapiens")
# Produce and save a publication quality static manhattan plot
# with the first 20 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:20],
filename = "../data/gostplot_oryza_nivara.png")
setwd("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/data")
# Produce and save a publication quality static manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10],
filename = "../docs/gostplot_oryza_nivara.png")
# Generate a table of the gost results
# Does not work on my computer.
gprofiler2::publish_gosttable(
top_ranked_genes_ghostres_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
# Generate a table of the gost results
# Does not work on my computer.
gprofiler2::publish_gosttable(
top_ranked_genes_ghostres_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:30],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
# Generate a table of the gost results
# Does not work on my computer.
gprofiler2::publish_gosttable(
top_ranked_genes_ghostres_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:50],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
# Generate a table of the gost results of the first 50 top-ranked GO terms
gprofiler2::publish_gosttable(
top_ranked_genes_ghostres_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:50],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_ranked_genes_ghostres_oryza_nivara,
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
# Functional enrichment analysis of the 100 top-ranked genes
top_ranked_genes_ghostres_oryza_sativa <- gprofiler2::gost(
top_ranked_genes_oryza_sativa_df$geneID[1:100],
organism = "osativa",
correction_method = "fdr")
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_sativa,
interactive = TRUE,
capped = FALSE)
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_sativa,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_ghostres_oryza_sativa$result$term_id[1:10])
# Produce a static publication quality manhattan plot
# with the first 10 top-ranked GO terms highlighted.
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_nivara,
interactive = FALSE,
capped = FALSE) |>
gprofiler2::publish_gostplot(
highlight_terms = top_ranked_genes_ghostres_oryza_nivara$result$term_id[1:10])
# Produce an interactive manhattan plot of the enriched GO terms
gprofiler2::gostplot(
top_ranked_genes_ghostres_oryza_sativa,
interactive = TRUE,
capped = FALSE)
# Generate a table of the gost results of the first 20 top-ranked GO terms
gprofiler2::publish_gosttable(
top_ranked_genes_ghostres_oryza_sativa,
highlight_terms = top_ranked_genes_ghostres_oryza_sativa$result$term_id[1:20],
show_columns = c("source", "term_name", "term_size", "intersection_size"))
