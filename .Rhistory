# Data:
# - studydesign_df
# - abundance_filepaths
# Load packages-----------------------------------------------------------------
# Provides static code analysis for R. It checks for adherence to a given style,
# identifying syntax errors and possible semantic issues
library(lintr)
# For setting the current working directory relative to the filepath
# of this script
library(this.path)
# Tools for Data Copy-Pasta. RStudio addins and R functions that make
# copy-pasting vectors and tables to text painless.
library(datapasta)
# Hadley Wickham's collection of R packages for data science
library(tidyverse)
# ------------------------------------------------------------------------------
# Set the project's data subdirectory as the current working directory
setwd(paste0(this.path::here(), "/../data"))
# Read in the studydesign file
studydesign_df <- readr::read_tsv(
"studydesign-PRJCA004229.tsv",
col_types = "icccccfffcficfc")
View(studydesign_df)
studydesign_oryza_nivara_df <-
studydesign_df |>
dplyr::filter(Organism == "Oryza nivara")
studydesign_oryza_sativa_df <-
studydesign_df |>
dplyr::filter(Organism == "Oryza sativa")
View(studydesign_oryza_nivara_df)
View(studydesign_oryza_sativa_df)
# - of the Oryza nivara samples
abundance_oryza_nivara_filepaths <- file.path(
studydesign_oryza_nivara_df$`Run accession`,
"abundance.tsv")
# - of the Oryza sativa samples
abundance_oryza_sativa_filepaths <- file.path(
studydesign_oryza_sativa_df$`Run accession`,
"abundance.tsv")
# For annotating the abundance data
library(biomaRt)
biomaRt::listMarts()
biomaRt::listMarts(host = "https://plants.ensembl.org")
# BioMaRt dataset for Oryza nivara
oryza_nivara_mart <- biomaRt::useMart(
biomart = "plants_mart",
dataset = "onivara_eg_gene",
host = "https://plants.ensembl.org")
# BioMaRt dataset for Oryza sativa
oryza_sativa_mart <- biomaRt::useMart(
biomart = "plants_mart",
dataset = "osativa_eg_gene",
host = "https://plants.ensembl.org")
listAttributes(oryza_nivara_mart)
listAttributes(oryza_sativa_mart)
# BioMaRt dataset for Oryza nivara
mart_oryza_nivara <- biomaRt::useMart(
biomart = "plants_mart",
dataset = "onivara_eg_gene",
host = "https://plants.ensembl.org")
# BioMaRt dataset for Oryza sativa
mart_oryza_sativa <- biomaRt::useMart(
biomart = "plants_mart",
dataset = "osativa_eg_gene",
host = "https://plants.ensembl.org")
tx2gene_oryza_nivara <- biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = mart_oryza_nivara)
View(tx2gene_oryza_nivara)
# TODO replace:
# Oryza nivara               : onivara_eg_gene
# Oryza sativa Japonica Group: osativa_eg_gene
# Ensembl annotations for tomato
lyc.anno <- biomaRt::useMart(
biomart = "plants_mart",
dataset = "slycopersicum_eg_gene",
host = "https://plants.ensembl.org")
# take a look at all available attributes within the selected tomato annotation
Tx.lyc <- biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = lyc.anno)
View(Tx.lyc)
# turn it into a tibble
tx2gene_oryza_nivara <- tibble::as_tibble(tx2gene_oryza_nivara)
# we need to rename the two columns we just retreived from biomart
tx2gene_oryza_nivara <- dplyr::rename(
Tx.lyc,
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id")
Tx.lyc <- dplyr::select(tx2gene_oryza_nivara, "target_id", "gene_name")
tx2gene_oryza_nivara <- biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = mart_oryza_nivara)
# turn it into a tibble
tx2gene_oryza_nivara <- tibble::as_tibble(tx2gene_oryza_nivara)
# turn it into a tibble
tx2gene_oryza_nivara <- tibble::as_tibble(tx2gene_oryza_nivara)
# we need to rename the two columns we just retreived from biomart
tx2gene_oryza_nivara <- dplyr::rename(
tx2gene_oryza_nivara,
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id")
tx2gene_oryza_nivara <- dplyr::select(tx2gene_oryza_nivara, "target_id", "gene_name")
tx2gene_oryza_nivara <-
biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = mart_oryza_nivara) |>
tibble::as_tibble() |>
dplyr::rename(
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id") |>
dplyr::select("target_id", "gene_name")
tx2gene_oryza_sativa <-
biomaRt::getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id", "description"),
mart = mart_oryza_sativa) |>
tibble::as_tibble() |>
dplyr::rename(
target_id = "ensembl_transcript_id",
gene_name = "ensembl_gene_id") |>
dplyr::select("target_id", "gene_name")
View(tx2gene_oryza_sativa)
# For getting Kallisto results into R
library(tximport)
txi_gene_oryza_nivara <- tximport::tximport(
abundance_oryza_nivara_filepaths,
type = "kallisto",
# Mapping from transcript IDs to gene IDs
tx2gene = tx2gene_oryza_nivara,
countsFromAbundance = "lengthScaledTPM",
ignoreTxVersion = TRUE)
View(tx2gene_oryza_nivara)
abundance_oryza_nivara_filepaths
txi_gene_oryza_nivara <- tximport::tximport(
"CRR240976/abundance.tsv",
type = "kallisto",
# Mapping from transcript IDs to gene IDs
tx2gene = tx2gene_oryza_nivara,
countsFromAbundance = "lengthScaledTPM",
ignoreTxVersion = TRUE)
View(Tx.lyc)
txi_gene_oryza_nivara <- tximport::tximport(
"CRR240976/abundance.tsv",
type = "kallisto",
# Mapping from transcript IDs to gene IDs
tx2gene = tx2gene_oryza_nivara,
countsFromAbundance = "lengthScaledTPM")
txi_gene_oryza_nivara <- tximport::tximport(
abundance_oryza_nivara_filepaths,
type = "kallisto",
tx2gene = tx2gene_oryza_nivara,
countsFromAbundance = "lengthScaledTPM")
View(txi_gene_oryza_nivara)
txi_gene_oryza_sativa <- tximport::tximport(
abundance_oryza_sativa_filepaths,
type = "kallisto",
tx2gene = tx2gene_oryza_nivara,
countsFromAbundance = "lengthScaledTPM")
txi_gene_oryza_sativa <- tximport::tximport(
abundance_oryza_sativa_filepaths,
type = "kallisto",
tx2gene = tx2gene_oryza_sativa,
countsFromAbundance = "lengthScaledTPM")
View(txi_gene_oryza_sativa)
source("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/scripts/dge-analysis-PRJCA004229.R", echo=TRUE)
View(studydesign_df)
# TODO: check if needed for further analysis
gene_tpm_oryza_nivara <- txi_gene_oryza_nivara$abundance
gene_counts_oryza_nivara <- txi_gene_oryza_nivara$counts
colSums(gene_tpm_oryza_nivara)
gene_tpm_oryza_nivara
colSums(gene_tpm_oryza_nivara)
colSums(gene_counts_oryza_nivara)
gene_tpm_oryza_sativa <- txi_gene_oryza_sativa$abundance
gene_counts_oryza_sativa <- txi_gene_oryza_sativa$counts
colSums(gene_tpm_oryza_sativa)
colSums(gene_counts_oryza_sativa)
colSums(gene_tpm_oryza_sativa)
colSums(gene_counts_oryza_sativa)
gene_tpm_oryza_nivara_stats <- transform(
gene_tpm_oryza_nivara,
SD = matrixStats::rowSds(gene_tpm_oryza_nivara),
AVG = rowMeans(gene_tpm_oryza_nivara),
MED = matrixStats::rowMedians(gene_tpm_oryza_nivara))
head(gene_tpm_oryza_nivara_stats)
gene_tpm_oryza_sativa_stats <- transform(
gene_tpm_oryza_sativa,
SD = matrixStats::rowSds(gene_tpm_oryza_sativa),
AVG = rowMeans(gene_tpm_oryza_sativa),
MED = matrixStats::rowMedians(gene_tpm_oryza_sativa))
head(gene_tpm_oryza_sativa_stats)
ggplot2::ggplot(gene_tpm_oryza_nivara_stats) +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 2) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = T, bins = 20) +
ggplot2::labs(
y = "Median",
x = "Standard deviation",
title = "Transcripts per million (TPM) - Orizy nivara",
subtitle = "unfiltered, non-normalized data",
caption = "DIYtranscriptomics - Spring 2020") +
ggplot2::theme_bw()
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::ggplot(gene_tpm_oryza_nivara_stats) +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = T, bins = 20) +
ggplot2::labs(
y = "Median",
x = "Standard deviation",
title = "Transcripts per million (TPM) - Oryza nivara",
subtitle = "unfiltered, non-normalized data") +
ggplot2::theme_bw()
source("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/scripts/dge-analysis-PRJCA004229.R", echo=TRUE)
ggplot2::ggplot(gene_tpm_oryza_nivara_stats) +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
y = "Median",
x = "Standard deviation",
title = "Transcripts per million (TPM) - Oryza nivara",
subtitle = "unfiltered, non-normalized data") +
ggplot2::theme_bw()
ggplot2::ggplot(gene_tpm_oryza_sativa_stats) +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
y = "Median",
x = "Standard deviation",
title = "Transcripts per million (TPM) - Oryza sativa",
subtitle = "unfiltered, non-normalized data") +
ggplot2::theme_bw()
# For differential expression analysis. Here used for creating DGEList objects
# and for data normalization.
library(edgeR)
dgelist_oryza_nivara <- edgeR::DGEList(txi_gene_oryza_nivara$counts)
dgelist_oryza_nivara
save(myDGEList, file = "dgelist_oryza_nivara")
save(dgelist_oryza_nivara, file = "dgelist_oryza_nivara")
# Get 'counts per million'
dge_cpm_oryza_nivara <- edgeR::cpm(dgelist_oryza_nivara)
colSums(dge_cpm_oryza_nivara)
# Get 'counts per million'
dge_cpm_oryza_nivara <- edgeR::cpm(dgelist_oryza_nivara)
dge_cpm_log2_oryza_nivara_df <-
edgeR::cpm(dge_cpm_oryza_nivara, log = TRUE) |>
tibble::as_tibble(rownames = "geneID")
View(dge_cpm_log2_oryza_nivara_df)
dge_cpm_log2_oryza_nivara_df <-
edgeR::cpm(dge_cpm_oryza_nivara, log = TRUE) |>
tibble::as_tibble(rownames = "geneID") |>
dplyr::rename_with(~ c("geneID", studydesign_oryza_nivara_df$`Sample name`))
# Pivot the dataframe
dge_cpm_log2_oryza_nivara_df_pivot <-
dge_cpm_log2_oryza_nivara_df |>
tidyr::pivot_longer(
cols = studydesign_oryza_nivara_df$`Sample name`,
names_to = "sample",
values_to = "expression")
View(dge_cpm_log2_oryza_nivara_df_pivot)
# Plot this pivoted data
plot_oryza_nivara_1 <- ggplot2::ggplot(dge_cpm_log2_oryza_nivara_df_pivot) +
ggplot2::aes(x = samples, y = expression, fill = samples) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza nivara - Log2 Counts per Million (CPM)",
subtitle = "unfiltered, non-normalized",
caption = paste0("produced on ", Sys.time())) +
ggplot2::theme_bw()
plot_oryza_nivara_1
# Plot this pivoted data
plot_oryza_nivara_1 <- ggplot2::ggplot(dge_cpm_log2_oryza_nivara_df_pivot) +
ggplot2::aes(
x = samples,
y = expression,
fill = studydesign_oryza_nivara_df$`Sample name`) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza nivara - Log2 Counts per Million (CPM)",
subtitle = "unfiltered, non-normalized",
caption = paste0("produced on ", Sys.time())) +
ggplot2::theme_bw()
plot_oryza_nivara_1
# Plot this pivoted data
plot_oryza_nivara_1 <- ggplot2::ggplot(dge_cpm_log2_oryza_nivara_df_pivot) +
ggplot2::aes(
x = sample,
y = expression,
fill = studydesign_oryza_nivara_df$`Sample name`) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza nivara - Log2 Counts per Million (CPM)",
subtitle = "unfiltered, non-normalized",
caption = paste0("produced on ", Sys.time())) +
ggplot2::theme_bw()
plot_oryza_nivara_1
rlang::last_trace()
# Get 'counts per million'
dge_cpm_oryza_nivara <- edgeR::cpm(dgelist_oryza_nivara)
dge_cpm_log2_oryza_nivara_df <-
edgeR::cpm(dge_cpm_oryza_nivara, log = TRUE) |>
tibble::as_tibble(rownames = "geneID") |>
dplyr::rename_with(~ c("geneID", samples_oryza_nivara))
samples_oryza_nivara <- studydesign_oryza_nivara_df$`Sample name`
# Create and save a DGE list for Oryza nivara
dgelist_oryza_nivara <- edgeR::DGEList(txi_gene_oryza_nivara$counts)
save(dgelist_oryza_nivara, file = "dgelist_oryza_nivara")
# Get 'counts per million'
dge_cpm_oryza_nivara <- edgeR::cpm(dgelist_oryza_nivara)
dge_cpm_log2_oryza_nivara_df <-
edgeR::cpm(dge_cpm_oryza_nivara, log = TRUE) |>
tibble::as_tibble(rownames = "geneID") |>
dplyr::rename_with(~ c("geneID", samples_oryza_nivara))
View(dge_cpm_log2_oryza_nivara_df)
# Pivot the dataframe
dge_cpm_log2_oryza_nivara_df_pivot <-
dge_cpm_log2_oryza_nivara_df |>
tidyr::pivot_longer(
cols = samples_oryza_nivara,
names_to = "sample",
values_to = "expression")
dge_cpm_log2_oryza_nivara_df <-
edgeR::cpm(dge_cpm_oryza_nivara, log = TRUE) |>
tibble::as_tibble(rownames = "geneID") |>
dplyr::rename_with(~ c("geneID", samples_oryza_nivara))
# Pivot the dataframe
dge_cpm_log2_oryza_nivara_df_pivot <-
dge_cpm_log2_oryza_nivara_df |>
tidyr::pivot_longer(
cols = samples_oryza_nivara,
names_to = "sample",
values_to = "expression")
View(dge_cpm_log2_oryza_nivara_df_pivot)
# Plot this pivoted data
plot_oryza_nivara_1 <- ggplot2::ggplot(dge_cpm_log2_oryza_nivara_df_pivot) +
ggplot2::aes(x = sample, y = expression, fill = samples_oryza_nivara) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza nivara - Log2 Counts per Million (CPM)",
subtitle = "unfiltered, non-normalized") +
ggplot2::theme_bw()
plot_oryza_nivara_1
# Plot this pivoted data
plot_oryza_nivara_1 <- ggplot2::ggplot(dge_cpm_log2_oryza_nivara_df_pivot) +
ggplot2::aes(x = sample, y = expression, fill = sample) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza nivara - Log2 Counts per Million (CPM)",
subtitle = "unfiltered, non-normalized") +
ggplot2::theme_bw()
plot_oryza_nivara_1
samples_oryza_sativa <- studydesign_oryza_sativa_df$`Sample name`
# Create and save a DGE list for Oryza nivara
dgelist_oryza_sativa <- edgeR::DGEList(txi_gene_oryza_sativa$counts)
save(dgelist_oryza_sativa, file = "dgelist_oryza_sativa")
# Get 'counts per million'
dge_cpm_oryza_sativa <- edgeR::cpm(dgelist_oryza_sativa)
dge_cpm_log2_oryza_sativa_df <-
edgeR::cpm(dge_cpm_oryza_sativa, log = TRUE) |>
tibble::as_tibble(rownames = "geneID") |>
dplyr::rename_with(~ c("geneID", samples_oryza_sativa))
# Pivot the dataframe
dge_cpm_log2_oryza_sativa_df_pivot <-
dge_cpm_log2_oryza_sativa_df |>
tidyr::pivot_longer(
cols = samples_oryza_sativa,
names_to = "sample",
values_to = "expression")
# Plot this pivoted data
plot_oryza_sativa_1 <- ggplot2::ggplot(dge_cpm_log2_oryza_sativa_df_pivot) +
ggplot2::aes(x = sample, y = expression, fill = sample) +
ggplot2::geom_violin(trim = FALSE, show.legend = FALSE) +
ggplot2::stat_summary(
fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
ggplot2::labs(
y = "log2 expression",
x = "sample",
title = "Oryza nivara - Log2 Counts per Million (CPM)",
subtitle = "unfiltered, non-normalized") +
ggplot2::theme_bw()
plot_oryza_sativa_1
source("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/scripts/dge-analysis-PRJCA004229.R", echo=TRUE)
# Oryza nivara
gene_tpm_oryza_nivara_stats <- transform(
txi_gene_oryza_nivara$abundance,
SD = matrixStats::rowSds(txi_gene_oryza_nivara$abundance),
AVG = rowMeans(txi_gene_oryza_nivara$abundance),
MED = matrixStats::rowMedians(txi_gene_oryza_nivara$abundance))
head(gene_tpm_oryza_nivara_stats)
ggplot2::ggplot(gene_tpm_oryza_nivara_stats) +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
y = "Median",
x = "Standard deviation",
title = "Oryza nivara - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data") +
ggplot2::theme_bw()
transform(
txi_gene_oryza_nivara$abundance,
SD = matrixStats::rowSds(txi_gene_oryza_nivara$abundance),
AVG = rowMeans(txi_gene_oryza_nivara$abundance),
MED = matrixStats::rowMedians(txi_gene_oryza_nivara$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
y = "Median",
x = "Standard deviation",
title = "Oryza nivara - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
transform(
txi_gene_oryza_nivara$abundance,
SD = matrixStats::rowSds(txi_gene_oryza_nivara$abundance),
AVG = rowMeans(txi_gene_oryza_nivara$abundance),
MED = matrixStats::rowMedians(txi_gene_oryza_nivara$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = "Oryza nivara - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
# Oryza sativa
transform(
txi_gene_oryza_sativa$abundance,
SD = matrixStats::rowSds(txi_gene_oryza_sativa$abundance),
AVG = rowMeans(txi_gene_oryza_sativa$abundance),
MED = matrixStats::rowMedians(txi_gene_oryza_sativa$abundance)
) |>
ggplot2::ggplot() +
ggplot2::aes(x = SD, y = MED) +
ggplot2::geom_point(shape = 1, size = 0.5) +
ggplot2::geom_smooth(method = lm) +
ggplot2::geom_hex(show.legend = TRUE) +
ggplot2::labs(
x = "Standard deviation",
y = "Median",
title = "Oryza sativa - Transcripts per million (TPM)",
subtitle = "unfiltered, non-normalized data"
) +
ggplot2::theme_bw()
source("//wsl.localhost/Ubuntu-22.04/home/uranus/QBio304 - Applied Bioinformatics/student-work/scripts/dge-analysis-PRJCA004229.R", echo=TRUE)
